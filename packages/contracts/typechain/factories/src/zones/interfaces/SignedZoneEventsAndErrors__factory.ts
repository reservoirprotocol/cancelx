/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  SignedZoneEventsAndErrors,
  SignedZoneEventsAndErrorsInterface,
} from "../../../../src/zones/interfaces/SignedZoneEventsAndErrors";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expectedConsiderationHash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actualConsiderationHash",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "InvalidConsideration",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidController",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "InvalidExtraDataLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedFulfiller",
        type: "address",
      },
      {
        internalType: "address",
        name: "actualFulfiller",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "InvalidFulfiller",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "InvalidSIP6Version",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "substandardVersion",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "InvalidSubstandardSupport",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "InvalidSubstandardVersion",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidZoneParameterEncoding",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOwnerOrActiveSigner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expiration",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "SignatureExpired",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "SignerNotActive",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "SignerAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "SignerRemoved",
    type: "event",
  },
] as const;

export class SignedZoneEventsAndErrors__factory {
  static readonly abi = _abi;
  static createInterface(): SignedZoneEventsAndErrorsInterface {
    return new utils.Interface(_abi) as SignedZoneEventsAndErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignedZoneEventsAndErrors {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SignedZoneEventsAndErrors;
  }
}
