/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  SignedZoneControllerInterface,
  SignedZoneControllerInterfaceInterface,
} from "../../../../src/zones/interfaces/SignedZoneControllerInterface";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "zone",
        type: "address",
      },
    ],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "zone",
        type: "address",
      },
    ],
    name: "cancelOwnershipTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "zoneName",
        type: "string",
      },
      {
        internalType: "string",
        name: "apiEndpoint",
        type: "string",
      },
      {
        internalType: "string",
        name: "documentationURI",
        type: "string",
      },
      {
        internalType: "address",
        name: "initialOwner",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
    ],
    name: "createZone",
    outputs: [
      {
        internalType: "address",
        name: "derivedAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signedZone",
        type: "address",
      },
    ],
    name: "getActiveSigners",
    outputs: [
      {
        internalType: "address[]",
        name: "signers",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "zone",
        type: "address",
      },
    ],
    name: "getAdditionalZoneInformation",
    outputs: [
      {
        internalType: "bytes32",
        name: "domainSeparator",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "zoneName",
        type: "string",
      },
      {
        internalType: "string",
        name: "apiEndpoint",
        type: "string",
      },
      {
        internalType: "uint256[]",
        name: "substandards",
        type: "uint256[]",
      },
      {
        internalType: "string",
        name: "documentationURI",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "zone",
        type: "address",
      },
    ],
    name: "getPotentialOwner",
    outputs: [
      {
        internalType: "address",
        name: "potentialOwner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
    ],
    name: "getZone",
    outputs: [
      {
        internalType: "address",
        name: "derivedAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "zone",
        type: "address",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "zone",
        type: "address",
      },
      {
        internalType: "address",
        name: "newPotentialOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signedZone",
        type: "address",
      },
      {
        internalType: "string",
        name: "newApiEndpoint",
        type: "string",
      },
    ],
    name: "updateAPIEndpoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signedZone",
        type: "address",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bool",
        name: "active",
        type: "bool",
      },
    ],
    name: "updateSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class SignedZoneControllerInterface__factory {
  static readonly abi = _abi;
  static createInterface(): SignedZoneControllerInterfaceInterface {
    return new utils.Interface(_abi) as SignedZoneControllerInterfaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignedZoneControllerInterface {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SignedZoneControllerInterface;
  }
}
