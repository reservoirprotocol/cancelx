/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type SchemaStruct = {
  id: PromiseOrValue<BigNumberish>;
  metadata: PromiseOrValue<BytesLike>;
};

export type SchemaStructOutput = [BigNumber, string] & {
  id: BigNumber;
  metadata: string;
};

export interface SIP5InterfaceInterface extends utils.Interface {
  functions: {
    "getSeaportMetadata()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "getSeaportMetadata"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getSeaportMetadata",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getSeaportMetadata",
    data: BytesLike
  ): Result;

  events: {
    "SeaportCompatibleContractDeployed()": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "SeaportCompatibleContractDeployed"
  ): EventFragment;
}

export interface SeaportCompatibleContractDeployedEventObject {}
export type SeaportCompatibleContractDeployedEvent = TypedEvent<
  [],
  SeaportCompatibleContractDeployedEventObject
>;

export type SeaportCompatibleContractDeployedEventFilter =
  TypedEventFilter<SeaportCompatibleContractDeployedEvent>;

export interface SIP5Interface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SIP5InterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getSeaportMetadata(
      overrides?: CallOverrides
    ): Promise<
      [string, SchemaStructOutput[]] & {
        name: string;
        schemas: SchemaStructOutput[];
      }
    >;
  };

  getSeaportMetadata(
    overrides?: CallOverrides
  ): Promise<
    [string, SchemaStructOutput[]] & {
      name: string;
      schemas: SchemaStructOutput[];
    }
  >;

  callStatic: {
    getSeaportMetadata(
      overrides?: CallOverrides
    ): Promise<
      [string, SchemaStructOutput[]] & {
        name: string;
        schemas: SchemaStructOutput[];
      }
    >;
  };

  filters: {
    "SeaportCompatibleContractDeployed()"(): SeaportCompatibleContractDeployedEventFilter;
    SeaportCompatibleContractDeployed(): SeaportCompatibleContractDeployedEventFilter;
  };

  estimateGas: {
    getSeaportMetadata(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getSeaportMetadata(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
