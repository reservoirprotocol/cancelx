/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface SignedZoneControllerEventsAndErrorsInterface
  extends utils.Interface {
  functions: {};

  events: {
    "OwnershipTransferred(address,address,address)": EventFragment;
    "PotentialOwnerUpdated(address)": EventFragment;
    "SignerUpdated(address,address,bool)": EventFragment;
    "ZoneCreated(address,string,string,string,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PotentialOwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZoneCreated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  zone: string;
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PotentialOwnerUpdatedEventObject {
  newPotentialOwner: string;
}
export type PotentialOwnerUpdatedEvent = TypedEvent<
  [string],
  PotentialOwnerUpdatedEventObject
>;

export type PotentialOwnerUpdatedEventFilter =
  TypedEventFilter<PotentialOwnerUpdatedEvent>;

export interface SignerUpdatedEventObject {
  signedZone: string;
  signer: string;
  active: boolean;
}
export type SignerUpdatedEvent = TypedEvent<
  [string, string, boolean],
  SignerUpdatedEventObject
>;

export type SignerUpdatedEventFilter = TypedEventFilter<SignerUpdatedEvent>;

export interface ZoneCreatedEventObject {
  zoneAddress: string;
  zoneName: string;
  apiEndpoint: string;
  documentationURI: string;
  salt: string;
}
export type ZoneCreatedEvent = TypedEvent<
  [string, string, string, string, string],
  ZoneCreatedEventObject
>;

export type ZoneCreatedEventFilter = TypedEventFilter<ZoneCreatedEvent>;

export interface SignedZoneControllerEventsAndErrors extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SignedZoneControllerEventsAndErrorsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "OwnershipTransferred(address,address,address)"(
      zone?: PromiseOrValue<string> | null,
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      zone?: PromiseOrValue<string> | null,
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PotentialOwnerUpdated(address)"(
      newPotentialOwner?: PromiseOrValue<string> | null
    ): PotentialOwnerUpdatedEventFilter;
    PotentialOwnerUpdated(
      newPotentialOwner?: PromiseOrValue<string> | null
    ): PotentialOwnerUpdatedEventFilter;

    "SignerUpdated(address,address,bool)"(
      signedZone?: null,
      signer?: null,
      active?: null
    ): SignerUpdatedEventFilter;
    SignerUpdated(
      signedZone?: null,
      signer?: null,
      active?: null
    ): SignerUpdatedEventFilter;

    "ZoneCreated(address,string,string,string,bytes32)"(
      zoneAddress?: null,
      zoneName?: null,
      apiEndpoint?: null,
      documentationURI?: null,
      salt?: null
    ): ZoneCreatedEventFilter;
    ZoneCreated(
      zoneAddress?: null,
      zoneName?: null,
      apiEndpoint?: null,
      documentationURI?: null,
      salt?: null
    ): ZoneCreatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
