{
  "address": "0xe6B2D741CA306EC1e0963028Ef2F233D162597db",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        }
      ],
      "name": "CallerIsNotNewPotentialOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        }
      ],
      "name": "CallerIsNotOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        }
      ],
      "name": "CallerIsNotOwnerOrSigner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCreator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newPotentialOwner",
          "type": "address"
        }
      ],
      "name": "NewPotentialOwnerAlreadySet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        }
      ],
      "name": "NewPotentialOwnerIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        }
      ],
      "name": "NoPotentialOwnerCurrentlySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoZone",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SignerAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SignerCannotBeReauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignerCannotBeZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SignerNotPresent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        }
      ],
      "name": "ZoneAlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "zone",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPotentialOwner",
          "type": "address"
        }
      ],
      "name": "PotentialOwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "signedZone",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "SignerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "zoneAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "zoneName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "apiEndpoint",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "documentationURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "ZoneCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        }
      ],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        }
      ],
      "name": "cancelOwnershipTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "zoneName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "apiEndpoint",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "documentationURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "createZone",
      "outputs": [
        {
          "internalType": "address",
          "name": "derivedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        }
      ],
      "name": "getActiveSigners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "signers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        }
      ],
      "name": "getAdditionalZoneInformation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "zoneName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "apiEndpoint",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "substandards",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "documentationURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        }
      ],
      "name": "getPotentialOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "potentialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "getZone",
      "outputs": [
        {
          "internalType": "address",
          "name": "derivedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newPotentialOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newApiEndpoint",
          "type": "string"
        }
      ],
      "name": "updateAPIEndpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zone",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "updateSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x36154d98f98ae3f846b440f9652da233b519c1e2b8d249dba785924650d8e606",
  "receipt": {
    "to": null,
    "from": "0x7852203a131Ff8b1D70Ab567df7f21457CBD53a4",
    "contractAddress": "0xe6B2D741CA306EC1e0963028Ef2F233D162597db",
    "transactionIndex": 25,
    "gasUsed": "3087211",
    "logsBloom": "0x
    "blockHash": "0xa9bc540443c624bd0dd89a27260c56f1cd85baf952e79da12377e20f092b5a76",
    "transactionHash": "0x36154d98f98ae3f846b440f9652da233b519c1e2b8d249dba785924650d8e606",
    "logs": [],
    "blockNumber": 8437268,
    "cumulativeGasUsed": "7849758",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2339bf4b64c8cbefe760a65feb1e1293",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"CallerIsNotNewPotentialOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"CallerIsNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"CallerIsNotOwnerOrSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"NewPotentialOwnerAlreadySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"NewPotentialOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"NoPotentialOwnerCurrentlySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoZone\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerCannotBeReauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignerCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerNotPresent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"ZoneAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"PotentialOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signedZone\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SignerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zoneAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"zoneName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"apiEndpoint\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"documentationURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"ZoneCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"zoneName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"apiEndpoint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentationURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createZone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"derivedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"getActiveSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"getAdditionalZoneInformation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"zoneName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"apiEndpoint\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"substandards\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"documentationURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"getPotentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"potentialOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"getZone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"derivedAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newApiEndpoint\",\"type\":\"string\"}],\"name\":\"updateAPIEndpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"updateSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BCLeFevre\",\"errors\":{\"CallerIsNotNewPotentialOwner(address)\":[{\"details\":\"Revert with an error when attempting to claim ownership of a zone      with a caller that is not the current potential owner for the      zone in question.\"}],\"CallerIsNotOwner(address)\":[{\"details\":\"Revert with an error when attempting to update channels or transfer      ownership of a zone when the caller is not the owner of the      zone in question.\"}],\"CallerIsNotOwnerOrSigner(address)\":[{\"details\":\"Revert with an error when the caller is not the owner or an active      signer of the signed zone in question.\"}],\"InvalidCreator()\":[{\"details\":\"Revert with an error when attempting to create a new signed zone      using a salt where the first twenty bytes do not match the address      of the caller or are not set to zero.\"}],\"InvalidInitialOwner()\":[{\"details\":\"Revert with an error when attempting to create a new zone when no      initial owner address is supplied.\"}],\"NewPotentialOwnerAlreadySet(address,address)\":[{\"details\":\"Revert with an error when attempting to set a new potential owner      that is already set.\"}],\"NewPotentialOwnerIsZeroAddress(address)\":[{\"details\":\"Revert with an error when attempting to register a new potential      owner and supplying the null address.\"}],\"NoPotentialOwnerCurrentlySet(address)\":[{\"details\":\"Revert with an error when attempting to cancel ownership transfer      when no new potential owner is currently set.\"}],\"NoZone()\":[{\"details\":\"Revert with an error when attempting to interact with a zone that      does not yet exist.\"}],\"SignerAlreadyAdded(address)\":[{\"details\":\"Revert with an error if trying to add a signer that is      already active.\"}],\"SignerCannotBeReauthorized(address)\":[{\"details\":\"Revert with an error if a removed signer is trying to be      reauthorized.\"}],\"SignerCannotBeZeroAddress()\":[{\"details\":\"Revert with an error if a new signer is the zero address.\"}],\"SignerNotPresent(address)\":[{\"details\":\"Revert with an error if trying to remove a signer that is      not present.\"}],\"ZoneAlreadyExists(address)\":[{\"details\":\"Revert with an error when attempting to deploy a zone that is      currently deployed.\"}]},\"kind\":\"dev\",\"methods\":{\"acceptOwnership(address)\":{\"params\":{\"zone\":\"The zone for which to accept ownership.\"}},\"cancelOwnershipTransfer(address)\":{\"params\":{\"zone\":\"The zone for which to cancel ownership transfer.\"}},\"constructor\":{\"details\":\"Initialize contract\"},\"createZone(string,string,string,address,bytes32)\":{\"params\":{\"apiEndpoint\":\"The API endpoint where orders for this zone can be                    signed.\",\"documentationURI\":\"The URI to the documentation describing the                         behavior of the contract.                    Request and response payloads are defined in SIP-7.\",\"initialOwner\":\"The initial owner to set for the new zone.\",\"salt\":\"The salt to be used to derive the zone address\",\"zoneName\":\"The name for the zone returned in                    getSeaportMetadata().\"},\"returns\":{\"derivedAddress\":\"The derived address for the zone.\"}},\"getActiveSigners(address)\":{\"params\":{\"zone\":\"The zone to return the active signers for.\"},\"returns\":{\"signers\":\"The active signers.\"}},\"getAdditionalZoneInformation(address)\":{\"returns\":{\"apiEndpoint\":\"     The API endpoint for the zone.\",\"documentationURI\":\"The documentation URI for the zone.\",\"domainSeparator\":\" The domain separator used for signing.\",\"substandards\":\"    The substandards supported by the zone.\",\"zoneName\":\"        The name of the zone.\"}},\"getPotentialOwner(address)\":{\"params\":{\"zone\":\"The zone for which to retrieve the potential owner.\"},\"returns\":{\"potentialOwner\":\"The potential owner, if any, for the zone.\"}},\"getZone(bytes32)\":{\"params\":{\"salt\":\"The salt to be used to derive the zone address.\"},\"returns\":{\"derivedAddress\":\"The derived address of the signed zone.\"}},\"ownerOf(address)\":{\"params\":{\"zone\":\"The zone for which to retrieve the associated owner.\"},\"returns\":{\"owner\":\"The owner of the supplied zone.\"}},\"transferOwnership(address,address)\":{\"params\":{\"newPotentialOwner\":\"The new potential owner of the zone.\",\"zone\":\"The zone for which to initiate ownership transfer.\"}},\"updateAPIEndpoint(address,string)\":{\"params\":{\"newApiEndpoint\":\"The new API endpoint.\",\"zone\":\"The signed zone to update the API endpoint for.\"}},\"updateSigner(address,address,bool)\":{\"params\":{\"active\":\"Whether the signer should be active or not.\",\"signer\":\"The signer to update the permissions for.\",\"zone\":\"The signed zone to update the signer permissions for.\"}}},\"stateVariables\":{\"_NAME_HASH\":{\"details\":\"The EIP-712 digest parameters for the SignedZone.\"},\"_signedZones\":{\"details\":\"Mapping of signed zone properties keyed by the Signed Zone      address.\"}},\"title\":\"SignedZoneController\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership(address)\":{\"notice\":\"Accept ownership of a supplied zone. Only accounts that the         current owner has set as the new potential owner may call this         function.\"},\"cancelOwnershipTransfer(address)\":{\"notice\":\"Clear the currently set potential owner, if any, from a zone.         Only the owner of the zone in question may call this function.\"},\"createZone(string,string,string,address,bytes32)\":{\"notice\":\"Deploy a SignedZone to a precomputed address.\"},\"getActiveSigners(address)\":{\"notice\":\"Returns the active signers for the zone.\"},\"getAdditionalZoneInformation(address)\":{\"notice\":\"External call to return the signing information, substandards,         and documentation about the zone.\"},\"getPotentialOwner(address)\":{\"notice\":\"Retrieve the potential owner, if any, for a given zone. The         current owner may set a new potential owner via         `transferOwnership` and that owner may then accept ownership of         the zone in question via `acceptOwnership`.\"},\"getZone(bytes32)\":{\"notice\":\"Derive the zone address associated with a salt.\"},\"ownerOf(address)\":{\"notice\":\"Retrieve the current owner of a deployed zone.\"},\"transferOwnership(address,address)\":{\"notice\":\"Initiate zone ownership transfer by assigning a new potential         owner for the given zone. Once set, the new potential owner         may call `acceptOwnership` to claim ownership of the zone.         Only the owner of the zone in question may call this function.\"},\"updateAPIEndpoint(address,string)\":{\"notice\":\"Update the API endpoint returned by a zone.         Only the owner or an active signer of the supplied zone can call         this function.\"},\"updateSigner(address,address,bool)\":{\"notice\":\"Add or remove a signer from the supplied zone.         Only the owner or an active signer of the supplied zone can call         this function.\"}},\"notice\":\"SignedZoneController enables the deploying of SignedZones.         SignedZones are an implementation of SIP-7 that requires orders to         be signed by  an approved signer.         https://github.com/ProjectOpenSea/SIPs/blob/main/SIPS/sip-7.md\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/zones/SignedZoneController.sol\":\"SignedZoneController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/interfaces/ZoneInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { ZoneParameters, Schema } from \\\"../lib/ConsiderationStructs.sol\\\";\\n\\ninterface ZoneInterface {\\n    function validateOrder(\\n        ZoneParameters calldata zoneParameters\\n    ) external returns (bytes4 validOrderMagicValue);\\n\\n    function getSeaportMetadata()\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            Schema[] memory schemas // map to Seaport Improvement Proposal IDs\\n        );\\n}\\n\",\"keccak256\":\"0xc2b345076997c6033e6c5179361597edfb490481a97dc11f09e2fae01e79bd16\",\"license\":\"MIT\"},\"src/lib/ConsiderationEnums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// prettier-ignore\\nenum OrderType {\\n    // 0: no partial fills, anyone can execute\\n    FULL_OPEN,\\n\\n    // 1: partial fills supported, anyone can execute\\n    PARTIAL_OPEN,\\n\\n    // 2: no partial fills, only offerer or zone can execute\\n    FULL_RESTRICTED,\\n\\n    // 3: partial fills supported, only offerer or zone can execute\\n    PARTIAL_RESTRICTED,\\n\\n    // 4: contract order type\\n    CONTRACT\\n}\\n\\n// prettier-ignore\\nenum BasicOrderType {\\n    // 0: no partial fills, anyone can execute\\n    ETH_TO_ERC721_FULL_OPEN,\\n\\n    // 1: partial fills supported, anyone can execute\\n    ETH_TO_ERC721_PARTIAL_OPEN,\\n\\n    // 2: no partial fills, only offerer or zone can execute\\n    ETH_TO_ERC721_FULL_RESTRICTED,\\n\\n    // 3: partial fills supported, only offerer or zone can execute\\n    ETH_TO_ERC721_PARTIAL_RESTRICTED,\\n\\n    // 4: no partial fills, anyone can execute\\n    ETH_TO_ERC1155_FULL_OPEN,\\n\\n    // 5: partial fills supported, anyone can execute\\n    ETH_TO_ERC1155_PARTIAL_OPEN,\\n\\n    // 6: no partial fills, only offerer or zone can execute\\n    ETH_TO_ERC1155_FULL_RESTRICTED,\\n\\n    // 7: partial fills supported, only offerer or zone can execute\\n    ETH_TO_ERC1155_PARTIAL_RESTRICTED,\\n\\n    // 8: no partial fills, anyone can execute\\n    ERC20_TO_ERC721_FULL_OPEN,\\n\\n    // 9: partial fills supported, anyone can execute\\n    ERC20_TO_ERC721_PARTIAL_OPEN,\\n\\n    // 10: no partial fills, only offerer or zone can execute\\n    ERC20_TO_ERC721_FULL_RESTRICTED,\\n\\n    // 11: partial fills supported, only offerer or zone can execute\\n    ERC20_TO_ERC721_PARTIAL_RESTRICTED,\\n\\n    // 12: no partial fills, anyone can execute\\n    ERC20_TO_ERC1155_FULL_OPEN,\\n\\n    // 13: partial fills supported, anyone can execute\\n    ERC20_TO_ERC1155_PARTIAL_OPEN,\\n\\n    // 14: no partial fills, only offerer or zone can execute\\n    ERC20_TO_ERC1155_FULL_RESTRICTED,\\n\\n    // 15: partial fills supported, only offerer or zone can execute\\n    ERC20_TO_ERC1155_PARTIAL_RESTRICTED,\\n\\n    // 16: no partial fills, anyone can execute\\n    ERC721_TO_ERC20_FULL_OPEN,\\n\\n    // 17: partial fills supported, anyone can execute\\n    ERC721_TO_ERC20_PARTIAL_OPEN,\\n\\n    // 18: no partial fills, only offerer or zone can execute\\n    ERC721_TO_ERC20_FULL_RESTRICTED,\\n\\n    // 19: partial fills supported, only offerer or zone can execute\\n    ERC721_TO_ERC20_PARTIAL_RESTRICTED,\\n\\n    // 20: no partial fills, anyone can execute\\n    ERC1155_TO_ERC20_FULL_OPEN,\\n\\n    // 21: partial fills supported, anyone can execute\\n    ERC1155_TO_ERC20_PARTIAL_OPEN,\\n\\n    // 22: no partial fills, only offerer or zone can execute\\n    ERC1155_TO_ERC20_FULL_RESTRICTED,\\n\\n    // 23: partial fills supported, only offerer or zone can execute\\n    ERC1155_TO_ERC20_PARTIAL_RESTRICTED\\n}\\n\\n// prettier-ignore\\nenum BasicOrderRouteType {\\n    // 0: provide Ether (or other native token) to receive offered ERC721 item.\\n    ETH_TO_ERC721,\\n\\n    // 1: provide Ether (or other native token) to receive offered ERC1155 item.\\n    ETH_TO_ERC1155,\\n\\n    // 2: provide ERC20 item to receive offered ERC721 item.\\n    ERC20_TO_ERC721,\\n\\n    // 3: provide ERC20 item to receive offered ERC1155 item.\\n    ERC20_TO_ERC1155,\\n\\n    // 4: provide ERC721 item to receive offered ERC20 item.\\n    ERC721_TO_ERC20,\\n\\n    // 5: provide ERC1155 item to receive offered ERC20 item.\\n    ERC1155_TO_ERC20\\n}\\n\\n// prettier-ignore\\nenum ItemType {\\n    // 0: ETH on mainnet, MATIC on polygon, etc.\\n    NATIVE,\\n\\n    // 1: ERC20 items (ERC777 and ERC20 analogues could also technically work)\\n    ERC20,\\n\\n    // 2: ERC721 items\\n    ERC721,\\n\\n    // 3: ERC1155 items\\n    ERC1155,\\n\\n    // 4: ERC721 items where a number of tokenIds are supported\\n    ERC721_WITH_CRITERIA,\\n\\n    // 5: ERC1155 items where a number of ids are supported\\n    ERC1155_WITH_CRITERIA\\n}\\n\\n// prettier-ignore\\nenum Side {\\n    // 0: Items that can be spent\\n    OFFER,\\n\\n    // 1: Items that must be received\\n    CONSIDERATION\\n}\\n\",\"keccak256\":\"0xdde76c34bfc09f40caecb9066685196d2d164f2714005cf8296398ba6cae23a6\",\"license\":\"MIT\"},\"src/lib/ConsiderationStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { OrderType, BasicOrderType, ItemType, Side } from \\\"./ConsiderationEnums.sol\\\";\\n\\n/**\\n * @dev An order contains eleven components: an offerer, a zone (or account that\\n *      can cancel the order or restrict who can fulfill the order depending on\\n *      the type), the order type (specifying partial fill support as well as\\n *      restricted order status), the start and end time, a hash that will be\\n *      provided to the zone when validating restricted orders, a salt, a key\\n *      corresponding to a given conduit, a counter, and an arbitrary number of\\n *      offer items that can be spent along with consideration items that must\\n *      be received by their respective recipient.\\n */\\nstruct OrderComponents {\\n    address offerer;\\n    address zone;\\n    OfferItem[] offer;\\n    ConsiderationItem[] consideration;\\n    OrderType orderType;\\n    uint256 startTime;\\n    uint256 endTime;\\n    bytes32 zoneHash;\\n    uint256 salt;\\n    bytes32 conduitKey;\\n    uint256 counter;\\n}\\n\\n/**\\n * @dev An offer item has five components: an item type (ETH or other native\\n *      tokens, ERC20, ERC721, and ERC1155, as well as criteria-based ERC721 and\\n *      ERC1155), a token address, a dual-purpose \\\"identifierOrCriteria\\\"\\n *      component that will either represent a tokenId or a merkle root\\n *      depending on the item type, and a start and end amount that support\\n *      increasing or decreasing amounts over the duration of the respective\\n *      order.\\n */\\nstruct OfferItem {\\n    ItemType itemType;\\n    address token;\\n    uint256 identifierOrCriteria;\\n    uint256 startAmount;\\n    uint256 endAmount;\\n}\\n\\n/**\\n * @dev A consideration item has the same five components as an offer item and\\n *      an additional sixth component designating the required recipient of the\\n *      item.\\n */\\nstruct ConsiderationItem {\\n    ItemType itemType;\\n    address token;\\n    uint256 identifierOrCriteria;\\n    uint256 startAmount;\\n    uint256 endAmount;\\n    address payable recipient;\\n}\\n\\n/**\\n * @dev A spent item is translated from a utilized offer item and has four\\n *      components: an item type (ETH or other native tokens, ERC20, ERC721, and\\n *      ERC1155), a token address, a tokenId, and an amount.\\n */\\nstruct SpentItem {\\n    ItemType itemType;\\n    address token;\\n    uint256 identifier;\\n    uint256 amount;\\n}\\n\\n/**\\n * @dev A received item is translated from a utilized consideration item and has\\n *      the same four components as a spent item, as well as an additional fifth\\n *      component designating the required recipient of the item.\\n */\\nstruct ReceivedItem {\\n    ItemType itemType;\\n    address token;\\n    uint256 identifier;\\n    uint256 amount;\\n    address payable recipient;\\n}\\n\\n/**\\n * @dev For basic orders involving ETH / native / ERC20 <=> ERC721 / ERC1155\\n *      matching, a group of six functions may be called that only requires a\\n *      subset of the usual order arguments. Note the use of a \\\"basicOrderType\\\"\\n *      enum; this represents both the usual order type as well as the \\\"route\\\"\\n *      of the basic order (a simple derivation function for the basic order\\n *      type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\\n */\\nstruct BasicOrderParameters {\\n    // calldata offset\\n    address considerationToken; // 0x24\\n    uint256 considerationIdentifier; // 0x44\\n    uint256 considerationAmount; // 0x64\\n    address payable offerer; // 0x84\\n    address zone; // 0xa4\\n    address offerToken; // 0xc4\\n    uint256 offerIdentifier; // 0xe4\\n    uint256 offerAmount; // 0x104\\n    BasicOrderType basicOrderType; // 0x124\\n    uint256 startTime; // 0x144\\n    uint256 endTime; // 0x164\\n    bytes32 zoneHash; // 0x184\\n    uint256 salt; // 0x1a4\\n    bytes32 offererConduitKey; // 0x1c4\\n    bytes32 fulfillerConduitKey; // 0x1e4\\n    uint256 totalOriginalAdditionalRecipients; // 0x204\\n    AdditionalRecipient[] additionalRecipients; // 0x224\\n    bytes signature; // 0x244\\n    // Total length, excluding dynamic array data: 0x264 (580)\\n}\\n\\n/**\\n * @dev Basic orders can supply any number of additional recipients, with the\\n *      implied assumption that they are supplied from the offered ETH (or other\\n *      native token) or ERC20 token for the order.\\n */\\nstruct AdditionalRecipient {\\n    uint256 amount;\\n    address payable recipient;\\n}\\n\\n/**\\n * @dev The full set of order components, with the exception of the counter,\\n *      must be supplied when fulfilling more sophisticated orders or groups of\\n *      orders. The total number of original consideration items must also be\\n *      supplied, as the caller may specify additional consideration items.\\n */\\nstruct OrderParameters {\\n    address offerer; // 0x00\\n    address zone; // 0x20\\n    OfferItem[] offer; // 0x40\\n    ConsiderationItem[] consideration; // 0x60\\n    OrderType orderType; // 0x80\\n    uint256 startTime; // 0xa0\\n    uint256 endTime; // 0xc0\\n    bytes32 zoneHash; // 0xe0\\n    uint256 salt; // 0x100\\n    bytes32 conduitKey; // 0x120\\n    uint256 totalOriginalConsiderationItems; // 0x140\\n    // offer.length                          // 0x160\\n}\\n\\n/**\\n * @dev Orders require a signature in addition to the other order parameters.\\n */\\nstruct Order {\\n    OrderParameters parameters;\\n    bytes signature;\\n}\\n\\n/**\\n * @dev Advanced orders include a numerator (i.e. a fraction to attempt to fill)\\n *      and a denominator (the total size of the order) in addition to the\\n *      signature and other order parameters. It also supports an optional field\\n *      for supplying extra data; this data will be provided to the zone if the\\n *      order type is restricted and the zone is not the caller, or will be\\n *      provided to the offerer as context for contract order types.\\n */\\nstruct AdvancedOrder {\\n    OrderParameters parameters;\\n    uint120 numerator;\\n    uint120 denominator;\\n    bytes signature;\\n    bytes extraData;\\n}\\n\\n/**\\n * @dev Orders can be validated (either explicitly via `validate`, or as a\\n *      consequence of a full or partial fill), specifically cancelled (they can\\n *      also be cancelled in bulk via incrementing a per-zone counter), and\\n *      partially or fully filled (with the fraction filled represented by a\\n *      numerator and denominator).\\n */\\nstruct OrderStatus {\\n    bool isValidated;\\n    bool isCancelled;\\n    uint120 numerator;\\n    uint120 denominator;\\n}\\n\\n/**\\n * @dev A criteria resolver specifies an order, side (offer vs. consideration),\\n *      and item index. It then provides a chosen identifier (i.e. tokenId)\\n *      alongside a merkle proof demonstrating the identifier meets the required\\n *      criteria.\\n */\\nstruct CriteriaResolver {\\n    uint256 orderIndex;\\n    Side side;\\n    uint256 index;\\n    uint256 identifier;\\n    bytes32[] criteriaProof;\\n}\\n\\n/**\\n * @dev A fulfillment is applied to a group of orders. It decrements a series of\\n *      offer and consideration items, then generates a single execution\\n *      element. A given fulfillment can be applied to as many offer and\\n *      consideration items as desired, but must contain at least one offer and\\n *      at least one consideration that match. The fulfillment must also remain\\n *      consistent on all key parameters across all offer items (same offerer,\\n *      token, type, tokenId, and conduit preference) as well as across all\\n *      consideration items (token, type, tokenId, and recipient).\\n */\\nstruct Fulfillment {\\n    FulfillmentComponent[] offerComponents;\\n    FulfillmentComponent[] considerationComponents;\\n}\\n\\n/**\\n * @dev Each fulfillment component contains one index referencing a specific\\n *      order and another referencing a specific offer or consideration item.\\n */\\nstruct FulfillmentComponent {\\n    uint256 orderIndex;\\n    uint256 itemIndex;\\n}\\n\\n/**\\n * @dev An execution is triggered once all consideration items have been zeroed\\n *      out. It sends the item in question from the offerer to the item's\\n *      recipient, optionally sourcing approvals from either this contract\\n *      directly or from the offerer's chosen conduit if one is specified. An\\n *      execution is not provided as an argument, but rather is derived via\\n *      orders, criteria resolvers, and fulfillments (where the total number of\\n *      executions will be less than or equal to the total number of indicated\\n *      fulfillments) and returned as part of `matchOrders`.\\n */\\nstruct Execution {\\n    ReceivedItem item;\\n    address offerer;\\n    bytes32 conduitKey;\\n}\\n\\n/**\\n * @dev Restricted orders are validated post-execution by calling validateOrder\\n *      on the zone. This struct provides context about the order fulfillment\\n *      and any supplied extraData, as well as all order hashes fulfilled in a\\n *      call to a match or fulfillAvailable method.\\n */\\nstruct ZoneParameters {\\n    bytes32 orderHash;\\n    address fulfiller;\\n    address offerer;\\n    SpentItem[] offer;\\n    ReceivedItem[] consideration;\\n    bytes extraData;\\n    bytes32[] orderHashes;\\n    uint256 startTime;\\n    uint256 endTime;\\n    bytes32 zoneHash;\\n}\\n\\n/**\\n * @dev Zones and contract offerers can communicate which schemas they implement\\n *      along with any associated metadata related to each schema.\\n */\\nstruct Schema {\\n    uint256 id;\\n    bytes metadata;\\n}\\n\",\"keccak256\":\"0x448bdb478f3a5f17d92295b16f2add313c8a0da6ff41b15b32e935a72f8e84fd\",\"license\":\"MIT\"},\"src/zones/SignedZone.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {\\n    ZoneParameters,\\n    Schema,\\n    ReceivedItem\\n} from \\\"../lib/ConsiderationStructs.sol\\\";\\n\\nimport { ZoneInterface } from \\\"../interfaces/ZoneInterface.sol\\\";\\n\\nimport {\\n    SignedZoneEventsAndErrors\\n} from \\\"./interfaces/SignedZoneEventsAndErrors.sol\\\";\\n\\nimport { SIP5Interface } from \\\"./interfaces/SIP5Interface.sol\\\";\\n\\nimport {\\n    SignedZoneControllerInterface\\n} from \\\"./interfaces/SignedZoneControllerInterface.sol\\\";\\n\\nimport \\\"./lib/SignedZoneConstants.sol\\\";\\n\\n/**\\n * @title  SignedZone\\n * @author ryanio, BCLeFevre\\n * @custom:modifiedby Tony Snark\\n * @notice SignedZone is an implementation of SIP-7 that requires orders\\n *         to be signed by an approved signer.\\n *         https://github.com/ProjectOpenSea/SIPs/blob/main/SIPS/sip-7.md\\n *\\n *         Modification:\\n *         Removes support for SIP7 sub-standard 1.\\n *         Adds support for SIP7 sub-standard 3.\\n */\\ncontract SignedZone is SignedZoneEventsAndErrors, ZoneInterface, SIP5Interface {\\n    /// @dev The zone's controller that is set during deployment.\\n    address private immutable _controller;\\n\\n    /// @dev The authorized signers, and if they are active\\n    mapping(address => bool) private _signers;\\n\\n    /// @dev The EIP-712 digest parameters.\\n    bytes32 internal immutable _NAME_HASH = keccak256(bytes(\\\"SignedZone\\\"));\\n    bytes32 internal immutable _VERSION_HASH = keccak256(bytes(\\\"1.0.0\\\"));\\n    // prettier-ignore\\n    bytes32 internal immutable _EIP_712_DOMAIN_TYPEHASH = keccak256(\\n          abi.encodePacked(\\n            \\\"EIP712Domain(\\\",\\n                \\\"string name,\\\",\\n                \\\"string version,\\\",\\n                \\\"uint256 chainId,\\\",\\n                \\\"address verifyingContract\\\",\\n            \\\")\\\"\\n          )\\n        );\\n    // prettier-ignore\\n    bytes32 internal immutable _SIGNED_ORDER_TYPEHASH = keccak256(\\n          abi.encodePacked(\\n            \\\"SignedOrder(\\\",\\n                \\\"address fulfiller,\\\",\\n                \\\"uint64 expiration,\\\",\\n                \\\"bytes32 orderHash,\\\",\\n                \\\"bytes context\\\",\\n            \\\")\\\"\\n          )\\n        );\\n\\n    bytes public constant CONSIDERATION_BYTES =\\n        // prettier-ignore\\n        abi.encodePacked(\\n              \\\"Consideration(\\\",\\n                  \\\"ReceivedItem[] consideration\\\",\\n              \\\")\\\"\\n        );\\n\\n    bytes public constant RECEIVED_ITEM_BYTES =\\n        // prettier-ignore\\n        abi.encodePacked(\\n              \\\"ReceivedItem(\\\",\\n                  \\\"uint8 itemType,\\\",\\n                  \\\"address token,\\\",\\n                  \\\"uint256 identifier,\\\",\\n                  \\\"uint256 amount,\\\",\\n                  \\\"address recipient\\\",\\n              \\\")\\\"\\n        );\\n\\n    bytes32 public constant RECEIVED_ITEM_HASHTYPE =\\n        keccak256(RECEIVED_ITEM_BYTES);\\n\\n    bytes32 public constant CONSIDERATION_HASHTYPE =\\n        keccak256(abi.encodePacked(CONSIDERATION_BYTES, RECEIVED_ITEM_BYTES));\\n\\n    uint256 internal immutable _CHAIN_ID = block.chainid;\\n    bytes32 internal immutable _DOMAIN_SEPARATOR;\\n\\n    /**\\n     * @notice Constructor to deploy the contract.\\n     */\\n    constructor() {\\n        // Set the deployer as the controller.\\n        _controller = msg.sender;\\n\\n        // Derive and set the domain separator.\\n        _DOMAIN_SEPARATOR = _deriveDomainSeparator();\\n\\n        // Emit an event to signal a SIP-5 contract has been deployed.\\n        emit SeaportCompatibleContractDeployed();\\n    }\\n\\n    /**\\n     * @notice Check if a given order including extraData is currently valid.\\n     *\\n     * @dev This function is called by Seaport whenever any extraData is\\n     *      provided by the caller.\\n     *\\n     * @return validOrderMagicValue A magic value indicating if the order is\\n     *                              currently valid.\\n     */\\n    function validateOrder(ZoneParameters calldata zoneParameters)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bytes4 validOrderMagicValue)\\n    {\\n        // Check Zone parameters validity.\\n        _assertValidZoneParameters();\\n\\n        // Put the extraData and orderHash on the stack for cheaper access.\\n        bytes calldata extraData = zoneParameters.extraData;\\n        bytes32 orderHash = zoneParameters.orderHash;\\n        uint256 considerationLength;\\n        // Declare a variable to hold the expiration.\\n        uint64 expiration;\\n\\n        // Validate the extraData.\\n        assembly {\\n            // Get the length of the extraData.\\n            let extraDataPtr := add(0x24, calldataload(Zone_extraData_cdPtr))\\n            let extraDataLength := calldataload(extraDataPtr)\\n\\n            if iszero(\\n                eq(extraDataLength, InvalidExtraDataLength_epected_length)\\n            ) {\\n                // Store left-padded selector with push4, mem[28:32] = selector\\n                mstore(0, InvalidExtraDataLength_error_selector)\\n                mstore(InvalidExtraDataLength_error_orderHash_ptr, orderHash)\\n                // revert(abi.encodeWithSignature(\\n                //   \\\"InvalidExtraDataLength(bytes32)\\\", orderHash)\\n                // )\\n                revert(0x1c, InvalidExtraDataLength_error_length)\\n            }\\n\\n            // extraData bytes 0-1: SIP-6 version byte (MUST be 0x00)\\n            let versionByte := shr(248, calldataload(add(extraDataPtr, 0x20)))\\n\\n            if iszero(eq(versionByte, 0x00)) {\\n                // Store left-padded selector with push4, mem[28:32] = selector\\n                mstore(0, InvalidSIP6Version_error_selector)\\n                mstore(InvalidSIP6Version_error_orderHash_ptr, orderHash)\\n                // revert(abi.encodeWithSignature(\\n                //   \\\"InvalidSIP6Version(bytes32)\\\", orderHash)\\n                // )\\n                revert(0x1c, InvalidSIP6Version_error_length)\\n            }\\n\\n            // extraData bytes 93-94: Substandard #1 (MUST be 0x00)\\n            let subStandardVersionByte := shr(\\n                248,\\n                calldataload(\\n                    add(extraDataPtr, ExtraData_substandard_version_byte_offset)\\n                )\\n            )\\n\\n            if iszero(eq(subStandardVersionByte, 0x00)) {\\n                // Store left-padded selector with push4, mem[28:32] = selector\\n                mstore(0, InvalidSubstandardVersion_error_selector)\\n                mstore(InvalidSubstandardVersion_error_orderHash_ptr, orderHash)\\n                // revert(abi.encodeWithSignature(\\n                //   \\\"InvalidSubstandardVersion(bytes32)\\\", orderHash)\\n                // )\\n                revert(0x1c, InvalidSubstandardVersion_error_length)\\n            }\\n\\n            // extraData bytes 21-29: expiration timestamp (uint64)\\n            expiration := shr(\\n                192,\\n                calldataload(add(extraDataPtr, ExtraData_expiration_offset))\\n            )\\n            // Revert if expired.\\n            if lt(expiration, timestamp()) {\\n                // Store left-padded selector with push4, mem[28:32] = selector\\n                mstore(0, SignatureExpired_error_selector)\\n                mstore(SignatureExpired_error_expiration_ptr, expiration)\\n                mstore(SignatureExpired_error_orderHash_ptr, orderHash)\\n                // revert(abi.encodeWithSignature(\\n                //   \\\"SignatureExpired(uint256, bytes32)\\\", expiration orderHash)\\n                // )\\n                revert(0x1c, SignatureExpired_error_length)\\n            }\\n\\n            // // Get the length of the consideration array.\\n            considerationLength := calldataload(\\n                add(0x24, calldataload(Zone_consideration_head_cdPtr))\\n            )\\n        }\\n\\n        // extraData bytes 29-93: signature\\n        // (strictly requires 64 byte compact sig, EIP-2098)\\n        bytes calldata signature = extraData[29:93];\\n\\n        // extraData bytes 93-end: context (optional, variable length)\\n        bytes calldata context = extraData[93:];\\n\\n        // Check the validity of the Substandard #1 extraData and get the\\n        // expected fulfiller address.\\n        address expectedFulfiller = _getExpectedFulfiller(orderHash);\\n\\n        // Check the validity of the Substandard #1 extraData and get the\\n        // expected fulfiller address.\\n        if (considerationLength > 0) {\\n            _assertValidSubstandard(\\n                _deriveConsiderationHash(zoneParameters.consideration),\\n                orderHash\\n            );\\n        }\\n\\n        // Derive the signedOrder hash.\\n        bytes32 signedOrderHash = _deriveSignedOrderHash(\\n            expectedFulfiller,\\n            expiration,\\n            orderHash,\\n            context\\n        );\\n\\n        // Derive the EIP-712 digest using the domain separator and signedOrder\\n        // hash.\\n        bytes32 digest = _deriveEIP712Digest(\\n            _domainSeparator(),\\n            signedOrderHash\\n        );\\n\\n        // Recover the signer address from the digest and signature.\\n        address recoveredSigner = _recoverSigner(digest, signature);\\n\\n        // Revert if the signer is not active.\\n        if (!_signers[recoveredSigner]) {\\n            revert SignerNotActive(recoveredSigner, orderHash);\\n        }\\n        // Return the selector of validateOrder as the magic value.\\n        validOrderMagicValue = ZoneInterface.validateOrder.selector;\\n    }\\n\\n    /**\\n     * @dev Returns Seaport metadata for this contract, returning the\\n     *      contract name and supported schemas.\\n     *\\n     * @return name The contract name\\n     * @return schemas  The supported SIPs\\n     */\\n    function getSeaportMetadata()\\n        external\\n        view\\n        override(SIP5Interface, ZoneInterface)\\n        returns (string memory name, Schema[] memory schemas)\\n    {\\n        // Return the supported SIPs.\\n        schemas = new Schema[](1);\\n        schemas[0].id = 7;\\n\\n        // Get the SIP-7 information.\\n        (\\n            bytes32 domainSeparator,\\n            string memory zoneName,\\n            string memory apiEndpoint,\\n            uint256[] memory substandards,\\n            string memory documentationURI\\n        ) = _sip7Information();\\n\\n        // Return the zone name.\\n        name = zoneName;\\n\\n        // Encode the SIP-7 information.\\n        schemas[0].metadata = abi.encode(\\n            domainSeparator,\\n            apiEndpoint,\\n            substandards,\\n            documentationURI\\n        );\\n    }\\n\\n    /**\\n     * @notice The fallback function is used as a dispatcher for the\\n     *         `updateSigner`, `getActiveSigners` and `supportsInterface`\\n     *         functions.\\n     */\\n    // prettier-ignore\\n    fallback(bytes calldata) external payable returns (bytes memory output) {\\n        // Get the function selector.\\n        bytes4 selector = msg.sig;\\n\\n        if (selector == 0xf460590b) {\\n            // updateSigner(address,bool)\\n\\n            // Get the signer, and active status.\\n            address signer = abi.decode(msg.data[4:], (address));\\n            bool active = abi.decode(msg.data[36:], (bool));\\n\\n            // Call to update the signer.\\n            _updateSigner(signer, active);\\n        } else if (selector == 0xa784b80c) {\\n            // getActiveSigners()\\n\\n            // Call the internal function to get the active signers.\\n            return abi.encode(_getActiveSigners());\\n        } else if (selector == 0x01ffc9a7) {\\n            // supportsInterface(bytes4)\\n\\n            // Get the interface ID.\\n            bytes4 interfaceId = abi.decode(msg.data[4:], (bytes4));\\n\\n            // Call the internal function to determine if the interface is\\n            // supported.\\n            return abi.encode(_supportsInterface(interfaceId));\\n        }\\n    }\\n\\n    /**\\n     * @notice Add or remove a signer to the zone.\\n     *         Only the controller can call this function.\\n     *\\n     * @param signer The signer address to add or remove.\\n     */\\n    function _updateSigner(address signer, bool active) internal {\\n        // Only the controller can call this function.\\n        _assertCallerIsController();\\n        // Add or remove the signer.\\n        active ? _addSigner(signer) : _removeSigner(signer);\\n    }\\n\\n    /**\\n     * @notice Add a new signer to the zone.\\n     *         Only the controller or an active signer can call this function.\\n     *\\n     * @param signer The new signer address to add.\\n     */\\n    function _addSigner(address signer) internal {\\n        // Set the signer info.\\n        _signers[signer] = true;\\n        // Emit an event that the signer was added.\\n        emit SignerAdded(signer);\\n    }\\n\\n    /**\\n     * @notice Remove an active signer from the zone.\\n     *         Only the controller or an active signer can call this function.\\n     *\\n     * @param signer The signer address to remove.\\n     */\\n    function _removeSigner(address signer) internal {\\n        // Set the signer's active status to false.\\n        _signers[signer] = false;\\n\\n        // Emit an event that the signer was removed.\\n        emit SignerRemoved(signer);\\n    }\\n\\n    /**\\n     * @notice Returns the active signers for the zone.\\n     *\\n     * @return signers The active signers.\\n     */\\n    function _getActiveSigners()\\n        internal\\n        view\\n        returns (address[] memory signers)\\n    {\\n        // Return the active signers for the zone by calling the controller.\\n        signers = SignedZoneControllerInterface(_controller).getActiveSigners(\\n            address(this)\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns whether the interface is supported.\\n     *\\n     * @param interfaceId The interface id to check against.\\n     */\\n    function _supportsInterface(bytes4 interfaceId)\\n        internal\\n        pure\\n        returns (bool supportsInterface)\\n    {\\n        // Determine if the interface is supported.\\n        supportsInterface =\\n            interfaceId == type(SIP5Interface).interfaceId || // SIP-5\\n            interfaceId == type(ZoneInterface).interfaceId || // ZoneInterface\\n            interfaceId == 0x01ffc9a7; // ERC-165\\n    }\\n\\n    /**\\n     * @notice Internal call to return the signing information, substandards,\\n     *         and documentation about the zone.\\n     *\\n     * @return domainSeparator  The domain separator used for signing.\\n     * @return zoneName         The zone name.\\n     * @return apiEndpoint      The API endpoint for the zone.\\n     * @return substandards     The substandards supported by the zone.\\n     * @return documentationURI The documentation URI for the zone.\\n     */\\n    function _sip7Information()\\n        internal\\n        view\\n        returns (\\n            bytes32 domainSeparator,\\n            string memory zoneName,\\n            string memory apiEndpoint,\\n            uint256[] memory substandards,\\n            string memory documentationURI\\n        )\\n    {\\n        // Return the SIP-7 information.\\n        domainSeparator = _domainSeparator();\\n\\n        // Get the SIP-7 information from the controller.\\n        (\\n            ,\\n            zoneName,\\n            apiEndpoint,\\n            substandards,\\n            documentationURI\\n        ) = SignedZoneControllerInterface(_controller)\\n            .getAdditionalZoneInformation(address(this));\\n    }\\n\\n    /**\\n     * @dev Derive the signedOrder hash from the orderHash and expiration.\\n     *\\n     * @param fulfiller  The expected fulfiller address.\\n     * @param expiration The signature expiration timestamp.\\n     * @param orderHash  The order hash.\\n     * @param context    The optional variable-length context.\\n     *\\n     * @return signedOrderHash The signedOrder hash.\\n     *\\n     */\\n    function _deriveSignedOrderHash(\\n        address fulfiller,\\n        uint64 expiration,\\n        bytes32 orderHash,\\n        bytes calldata context\\n    ) internal view returns (bytes32 signedOrderHash) {\\n        // Derive the signed order hash.\\n        signedOrderHash = keccak256(\\n            abi.encode(\\n                _SIGNED_ORDER_TYPEHASH,\\n                fulfiller,\\n                expiration,\\n                orderHash,\\n                keccak256(context)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal view function to return the signer of a signature.\\n     *\\n     * @param digest    The digest to verify the signature against.\\n     * @param signature A signature from the signer indicating that the order\\n     *                  has been approved.\\n     *\\n     * @return recoveredSigner The recovered signer.\\n     */\\n    function _recoverSigner(bytes32 digest, bytes memory signature)\\n        internal\\n        view\\n        returns (address recoveredSigner)\\n    {\\n        // Utilize assembly to perform optimized signature verification check.\\n        assembly {\\n            // Ensure that first word of scratch space is empty.\\n            mstore(0, 0)\\n\\n            // Declare value for v signature parameter.\\n            let v\\n\\n            // Get the length of the signature.\\n            let signatureLength := mload(signature)\\n\\n            // Get the pointer to the value preceding the signature length.\\n            // This will be used for temporary memory overrides - either the\\n            // signature head for isValidSignature or the digest for ecrecover.\\n            let wordBeforeSignaturePtr := sub(signature, OneWord)\\n\\n            // Cache the current value behind the signature to restore it later.\\n            let cachedWordBeforeSignature := mload(wordBeforeSignaturePtr)\\n\\n            // Declare lenDiff + recoveredSigner scope to manage stack pressure.\\n            {\\n                // Take the difference between the max ECDSA signature length\\n                // and the actual signature length. Overflow desired for any\\n                // values > 65. If the diff is not 0 or 1, it is not a valid\\n                // ECDSA signature - move on to EIP1271 check.\\n                let lenDiff := sub(ECDSA_MaxLength, signatureLength)\\n\\n                // If diff is 0 or 1, it may be an ECDSA signature.\\n                // Try to recover signer.\\n                if iszero(gt(lenDiff, 1)) {\\n                    // Read the signature `s` value.\\n                    let originalSignatureS := mload(\\n                        add(signature, ECDSA_signature_s_offset)\\n                    )\\n\\n                    // Read the first byte of the word after `s`. If the\\n                    // signature is 65 bytes, this will be the real `v` value.\\n                    // If not, it will need to be modified - doing it this way\\n                    // saves an extra condition.\\n                    v := byte(\\n                        0,\\n                        mload(add(signature, ECDSA_signature_v_offset))\\n                    )\\n\\n                    // If lenDiff is 1, parse 64-byte signature as ECDSA.\\n                    if lenDiff {\\n                        // Extract yParity from highest bit of vs and add 27 to\\n                        // get v.\\n                        v := add(\\n                            shr(MaxUint8, originalSignatureS),\\n                            Signature_lower_v\\n                        )\\n\\n                        // Extract canonical s from vs, all but the highest bit.\\n                        // Temporarily overwrite the original `s` value in the\\n                        // signature.\\n                        mstore(\\n                            add(signature, ECDSA_signature_s_offset),\\n                            and(\\n                                originalSignatureS,\\n                                EIP2098_allButHighestBitMask\\n                            )\\n                        )\\n                    }\\n                    // Temporarily overwrite the signature length with `v` to\\n                    // conform to the expected input for ecrecover.\\n                    mstore(signature, v)\\n\\n                    // Temporarily overwrite the word before the length with\\n                    // `digest` to conform to the expected input for ecrecover.\\n                    mstore(wordBeforeSignaturePtr, digest)\\n\\n                    // Attempt to recover the signer for the given signature. Do\\n                    // not check the call status as ecrecover will return a null\\n                    // address if the signature is invalid.\\n                    pop(\\n                        staticcall(\\n                            gas(),\\n                            Ecrecover_precompile, // Call ecrecover precompile.\\n                            wordBeforeSignaturePtr, // Use data memory location.\\n                            Ecrecover_args_size, // Size of digest, v, r, and s.\\n                            0, // Write result to scratch space.\\n                            OneWord // Provide size of returned result.\\n                        )\\n                    )\\n\\n                    // Restore cached word before signature.\\n                    mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\\n\\n                    // Restore cached signature length.\\n                    mstore(signature, signatureLength)\\n\\n                    // Restore cached signature `s` value.\\n                    mstore(\\n                        add(signature, ECDSA_signature_s_offset),\\n                        originalSignatureS\\n                    )\\n\\n                    // Read the recovered signer from the buffer given as return\\n                    // space for ecrecover.\\n                    recoveredSigner := mload(0)\\n                }\\n            }\\n\\n            // Restore the cached values overwritten by selector, digest and\\n            // signature head.\\n            mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal view function to get the EIP-712 domain separator. If the\\n     *      chainId matches the chainId set on deployment, the cached domain\\n     *      separator will be returned; otherwise, it will be derived from\\n     *      scratch.\\n     *\\n     * @return The domain separator.\\n     */\\n    function _domainSeparator() internal view returns (bytes32) {\\n        // prettier-ignore\\n        return block.chainid == _CHAIN_ID\\n            ? _DOMAIN_SEPARATOR\\n            : _deriveDomainSeparator();\\n    }\\n\\n    /**\\n     * @dev Internal view function to derive the EIP-712 domain separator.\\n     *\\n     * @return domainSeparator The derived domain separator.\\n     */\\n    function _deriveDomainSeparator()\\n        internal\\n        view\\n        returns (bytes32 domainSeparator)\\n    {\\n        bytes32 typehash = _EIP_712_DOMAIN_TYPEHASH;\\n        bytes32 nameHash = _NAME_HASH;\\n        bytes32 versionHash = _VERSION_HASH;\\n\\n        // Leverage scratch space and other memory to perform an efficient hash.\\n        assembly {\\n            // Retrieve the free memory pointer; it will be replaced afterwards.\\n            let freeMemoryPointer := mload(FreeMemoryPointerSlot)\\n\\n            // Retrieve value at 0x80; it will also be replaced afterwards.\\n            let slot0x80 := mload(Slot0x80)\\n\\n            // Place typehash, name hash, and version hash at start of memory.\\n            mstore(0, typehash)\\n            mstore(OneWord, nameHash)\\n            mstore(TwoWords, versionHash)\\n\\n            // Place chainId in the next memory location.\\n            mstore(ThreeWords, chainid())\\n\\n            // Place the address of this contract in the next memory location.\\n            mstore(FourWords, address())\\n\\n            // Hash relevant region of memory to derive the domain separator.\\n            domainSeparator := keccak256(0, FiveWords)\\n\\n            // Restore the free memory pointer.\\n            mstore(FreeMemoryPointerSlot, freeMemoryPointer)\\n\\n            // Restore the zero slot to zero.\\n            mstore(ZeroSlot, 0)\\n\\n            // Restore the value at 0x80.\\n            mstore(Slot0x80, slot0x80)\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal pure function to efficiently derive an digest to sign for\\n     *      an order in accordance with EIP-712.\\n     *\\n     * @param domainSeparator The domain separator.\\n     * @param signedOrderHash The signedOrder hash.\\n     *\\n     * @return digest The digest hash.\\n     */\\n    function _deriveEIP712Digest(\\n        bytes32 domainSeparator,\\n        bytes32 signedOrderHash\\n    ) internal pure returns (bytes32 digest) {\\n        // Leverage scratch space to perform an efficient hash.\\n        assembly {\\n            // Place the EIP-712 prefix at the start of scratch space.\\n            mstore(0, EIP_712_PREFIX)\\n\\n            // Place the domain separator in the next region of scratch space.\\n            mstore(EIP712_DomainSeparator_offset, domainSeparator)\\n\\n            // Place the signed order hash in scratch space, spilling into the\\n            // first two bytes of the free memory pointer \\u2014 this should never be\\n            // set as memory cannot be expanded to that size, and will be\\n            // zeroed out after the hash is performed.\\n            mstore(EIP712_SignedOrderHash_offset, signedOrderHash)\\n\\n            // Hash the relevant region\\n            digest := keccak256(0, EIP712_DigestPayload_size)\\n\\n            // Clear out the dirtied bits in the memory pointer.\\n            mstore(EIP712_SignedOrderHash_offset, 0)\\n        }\\n    }\\n\\n    /**\\n     * @dev Private view function to revert if the caller is not the\\n     *      controller.\\n     */\\n    function _assertCallerIsController() internal view {\\n        // Get the controller address to use in the assembly block.\\n        address controller = _controller;\\n\\n        assembly {\\n            // Revert if the caller is not the controller.\\n            if iszero(eq(caller(), controller)) {\\n                // Store left-padded selector with push4, mem[28:32] = selector\\n                mstore(0, InvalidController_error_selector)\\n                // revert(abi.encodeWithSignature(\\n                //   \\\"InvalidController()\\\")\\n                // )\\n                revert(0x1c, InvalidController_error_length)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal pure function to validate calldata offsets for the\\n     *      dyanamic type in ZoneParameters. This ensures that functions using\\n     *      the calldata object normally will be using the same data as the\\n     *      assembly functions and that values that are bound to a given range\\n     *      are within that range.\\n     */\\n    function _assertValidZoneParameters() internal pure {\\n        // Utilize assembly in order to read offset data directly from calldata.\\n        assembly {\\n            /*\\n             * Checks:\\n             * 1. Zone parameters struct offset == 0x20\\n             */\\n\\n            // Zone parameters at calldata 0x04 must have offset of 0x20.\\n            if iszero(\\n                eq(calldataload(Zone_parameters_cdPtr), Zone_parameters_ptr)\\n            ) {\\n                // Store left-padded selector with push4 (reduces bytecode), mem[28:32] = selector\\n                mstore(0, InvalidZoneParameterEncoding_error_selector)\\n                // revert(abi.encodeWithSignature(\\\"InvalidZoneParameterEncoding()\\\"))\\n                revert(0x1c, InvalidZoneParameterEncoding_error_length)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal pure function to ensure that the context argument for the\\n     *      supplied extra data follows the substandard #1 format. Returns the\\n     *      expected fulfiller of the order for deriving the signed order hash.\\n     *\\n     * @param orderHash The order hash.\\n     *\\n     * @return expectedFulfiller The expected fulfiller of the order.\\n     */\\n    function _getExpectedFulfiller(bytes32 orderHash)\\n        internal\\n        pure\\n        returns (address expectedFulfiller)\\n    {\\n        // Revert if the expected fulfiller is not the zero address and does\\n        // not match the actual fulfiller\\n        assembly {\\n            // Get the actual fulfiller.\\n            let actualFulfiller := calldataload(Zone_parameters_fulfiller_cdPtr)\\n            let extraDataPtr := calldataload(Zone_extraData_cdPtr)\\n\\n            // Get the expected fulfiller.\\n            expectedFulfiller := shr(\\n                96,\\n                calldataload(add(expectedFulfiller_offset, extraDataPtr))\\n            )\\n\\n            // Revert if expected fulfiller is not the zero address and does\\n            // not match the actual fulfiller.\\n            if and(\\n                iszero(iszero(expectedFulfiller)),\\n                iszero(eq(expectedFulfiller, actualFulfiller))\\n            ) {\\n                // Store left-padded selector with push4, mem[28:32] = selector\\n                mstore(0, InvalidFulfiller_error_selector)\\n                mstore(\\n                    InvalidFulfiller_error_expectedFulfiller_ptr,\\n                    expectedFulfiller\\n                )\\n                mstore(\\n                    InvalidFulfiller_error_actualFulfiller_ptr,\\n                    actualFulfiller\\n                )\\n                mstore(InvalidFulfiller_error_orderHash_ptr, orderHash)\\n                // revert(abi.encodeWithSignature(\\n                //   \\\"InvalidFulfiller(address,address,bytes32)\\\", expectedFulfiller, actualFulfiller, orderHash)\\n                // )\\n                revert(0x1c, InvalidFulfiller_error_length)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal pure function to ensure that the context argument for the\\n     *      supplied extra data follows the substandard #1 format. Returns the\\n     *      expected fulfiller of the order for deriving the signed order hash.\\n     *\\n     */\\n    function _assertValidSubstandard(\\n        bytes32 considerationHash,\\n        bytes32 orderHash\\n    ) internal pure {\\n        // identifier does not match the actual consideration.\\n        assembly {\\n            let extraDataPtr := calldataload(Zone_extraData_cdPtr)\\n            let considerationPtr := calldataload(Zone_consideration_head_cdPtr)\\n            // Get the actual consideration.\\n            let actualConsideration := calldataload(\\n                add(actualConsideration_offset, considerationPtr)\\n            )\\n\\n            // Get the expected consideration.\\n            let expectedConsiderationHash := calldataload(\\n                add(expectedConsideration_offset, extraDataPtr) //TODO rename\\n            )\\n            // Revert if expected consideration item does not match the actual\\n            // consideration item.\\n            if iszero(eq(considerationHash, expectedConsiderationHash)) {\\n                // Store left-padded selector with push4, mem[28:32] = selector\\n                mstore(0, InvalidConsideration_error_selector)\\n                mstore(\\n                    InvalidConsideration_error_expectedConsideration_ptr,\\n                    expectedConsiderationHash\\n                )\\n                mstore(\\n                    InvalidConsideration_error_actualConsideration_ptr,\\n                    actualConsideration\\n                )\\n                mstore(InvalidConsideration_error_orderHash_ptr, orderHash)\\n                // revert(abi.encodeWithSignature(\\n                //   \\\"InvalidConsideration(uint256,uint256,bytes32)\\\", expectedConsideration, actualConsideration, orderHash)\\n                // )\\n                revert(0x1c, InvalidConsideration_error_length)\\n            }\\n        }\\n    }\\n\\n    /// @dev Calculates consideration hash\\n    function _deriveConsiderationHash(ReceivedItem[] calldata consideration)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        uint256 numberOfItems = consideration.length;\\n        bytes32[] memory considerationHashes = new bytes32[](numberOfItems);\\n        for (uint256 i; i < numberOfItems; ) {\\n            considerationHashes[i] = _deriveReceivedItemHash(consideration[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    CONSIDERATION_HASHTYPE,\\n                    keccak256(abi.encodePacked(considerationHashes))\\n                )\\n            );\\n    }\\n\\n    /// @dev Calculates consideration item hash\\n    function _deriveReceivedItemHash(ReceivedItem calldata receivedItem)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    RECEIVED_ITEM_HASHTYPE,\\n                    receivedItem.itemType,\\n                    receivedItem.token,\\n                    receivedItem.identifier,\\n                    receivedItem.amount,\\n                    receivedItem.recipient\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x56ae07ddfc0fac8f1c4a090db67f6829720a0cbca351fa7d5ea9f41d41559b06\",\"license\":\"MIT\"},\"src/zones/SignedZoneController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { SignedZone } from \\\"./SignedZone.sol\\\";\\n\\nimport { SignedZoneInterface } from \\\"./interfaces/SignedZoneInterface.sol\\\";\\n\\nimport {\\n    SignedZoneControllerInterface\\n} from \\\"./interfaces/SignedZoneControllerInterface.sol\\\";\\n\\nimport {\\n    SignedZoneControllerEventsAndErrors\\n} from \\\"./interfaces/SignedZoneControllerEventsAndErrors.sol\\\";\\n\\nimport \\\"./lib/SignedZoneConstants.sol\\\";\\n\\n/**\\n * @title  SignedZoneController\\n * @author BCLeFevre\\n * @notice SignedZoneController enables the deploying of SignedZones.\\n *         SignedZones are an implementation of SIP-7 that requires orders to\\n *         be signed by  an approved signer.\\n *         https://github.com/ProjectOpenSea/SIPs/blob/main/SIPS/sip-7.md\\n */\\ncontract SignedZoneController is\\n    SignedZoneControllerInterface,\\n    SignedZoneControllerEventsAndErrors\\n{\\n    /**\\n     * @dev The struct for storing signer info.\\n     */\\n    struct SignerInfo {\\n        /// @dev If the signer is currently active.\\n        bool active;\\n        /// @dev If the signer has been active before.\\n        bool previouslyActive;\\n    }\\n\\n    // Properties used by the signed zone, stored on the controller.\\n    struct SignedZoneProperties {\\n        /// @dev Owner of the signed zone (used for permissioned functions)\\n        address owner;\\n        /// @dev Potential owner of the signed zone\\n        address potentialOwner;\\n        /// @dev The name for this zone returned in getSeaportMetadata().\\n        string zoneName;\\n        /// @dev The API endpoint where orders for this zone can be signed.\\n        ///      Request and response payloads are defined in SIP-7.\\n        string apiEndpoint;\\n        /// @dev The URI to the documentation describing the behavior of the\\n        ///      contract.\\n        string documentationURI;\\n        /// @dev The substandards supported by this zone.\\n        ///      Substandards are defined in SIP-7.\\n        uint256[] substandards;\\n        /// @dev Mapping of signer information keyed by signer Address\\n        mapping(address => SignerInfo) signers;\\n        /// @dev List of active signers\\n        address[] activeSignerList;\\n    }\\n\\n    /// @dev Mapping of signed zone properties keyed by the Signed Zone\\n    ///      address.\\n    mapping(address => SignedZoneProperties) internal _signedZones;\\n\\n    /// @dev The EIP-712 digest parameters for the SignedZone.\\n    bytes32 internal immutable _NAME_HASH = keccak256(bytes(\\\"SignedZone\\\"));\\n    bytes32 internal immutable _VERSION_HASH = keccak256(bytes(\\\"1.0\\\"));\\n    // prettier-ignore\\n    bytes32 internal immutable _EIP_712_DOMAIN_TYPEHASH = keccak256(\\n          abi.encodePacked(\\n            \\\"EIP712Domain(\\\",\\n                \\\"string name,\\\",\\n                \\\"string version,\\\",\\n                \\\"uint256 chainId,\\\",\\n                \\\"address verifyingContract\\\",\\n            \\\")\\\"\\n          )\\n        );\\n    uint256 internal immutable _CHAIN_ID = block.chainid;\\n\\n    // Set the signed zone creation code as an immutable argument.\\n    bytes32 internal immutable _SIGNED_ZONE_CREATION_CODE_HASH;\\n\\n    /**\\n     * @dev Initialize contract\\n     */\\n    constructor() {\\n        // Derive the signed zone creation code hash and set it as an\\n        // immutable.\\n        _SIGNED_ZONE_CREATION_CODE_HASH = keccak256(\\n            type(SignedZone).creationCode\\n        );\\n    }\\n\\n    /**\\n     * @notice Deploy a SignedZone to a precomputed address.\\n     *\\n     * @param zoneName    The name for the zone returned in\\n     *                    getSeaportMetadata().\\n     * @param apiEndpoint The API endpoint where orders for this zone can be\\n     *                    signed.\\n     * @param documentationURI The URI to the documentation describing the\\n     *                         behavior of the contract.\\n     *                    Request and response payloads are defined in SIP-7.\\n     * @param salt        The salt to be used to derive the zone address\\n     * @param initialOwner The initial owner to set for the new zone.\\n     *\\n     * @return derivedAddress The derived address for the zone.\\n     */\\n    function createZone(\\n        string memory zoneName,\\n        string memory apiEndpoint,\\n        string memory documentationURI,\\n        address initialOwner,\\n        bytes32 salt\\n    ) external override returns (address derivedAddress) {\\n        // Ensure that an initial owner has been supplied.\\n        if (initialOwner == address(0)) {\\n            revert InvalidInitialOwner();\\n        }\\n\\n        // Ensure the first 20 bytes of the salt are the same as the msg.sender.\\n        if ((address(uint160(bytes20(salt))) != msg.sender)) {\\n            // Revert with an error indicating that the creator is invalid.\\n            revert InvalidCreator();\\n        }\\n\\n        // Derive the SignedZone address from the deployer, salt and creation\\n        // code hash.\\n        derivedAddress = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            bytes1(0xff),\\n                            address(this),\\n                            salt,\\n                            _SIGNED_ZONE_CREATION_CODE_HASH\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n\\n        // TODO : Check runtime code hash to ensure that the zone is not already\\n        // deployed.\\n        // Revert if a zone is currently deployed to the derived address.\\n        if (derivedAddress.code.length != 0) {\\n            revert ZoneAlreadyExists(derivedAddress);\\n        }\\n\\n        // Deploy the zone using the supplied salt.\\n        new SignedZone{ salt: salt }();\\n\\n        // Initialize storage variable referencing signed zone properties.\\n        SignedZoneProperties storage signedZoneProperties = _signedZones[\\n            derivedAddress\\n        ];\\n\\n        // Set the supplied intial owner as the owner of the zone.\\n        signedZoneProperties.owner = initialOwner;\\n        // Set the zone name.\\n        signedZoneProperties.zoneName = zoneName;\\n        // Set the API endpoint.\\n        signedZoneProperties.apiEndpoint = apiEndpoint;\\n        // Set the documentation URI.\\n        signedZoneProperties.documentationURI = documentationURI;\\n        // Set the substandard.\\n        signedZoneProperties.substandards = [3];\\n\\n        // Emit an event signifying that the zone was created.\\n        emit ZoneCreated(\\n            derivedAddress,\\n            zoneName,\\n            apiEndpoint,\\n            documentationURI,\\n            salt\\n        );\\n\\n        // Emit an event indicating that zone ownership has been assigned.\\n        emit OwnershipTransferred(derivedAddress, address(0), initialOwner);\\n    }\\n\\n    /**\\n     * @notice Initiate zone ownership transfer by assigning a new potential\\n     *         owner for the given zone. Once set, the new potential owner\\n     *         may call `acceptOwnership` to claim ownership of the zone.\\n     *         Only the owner of the zone in question may call this function.\\n     *\\n     * @param zone The zone for which to initiate ownership transfer.\\n     * @param newPotentialOwner The new potential owner of the zone.\\n     */\\n    function transferOwnership(address zone, address newPotentialOwner)\\n        external\\n        override\\n    {\\n        // Ensure the caller is the current owner of the zone in question.\\n        _assertCallerIsZoneOwner(zone);\\n\\n        // Ensure the new potential owner is not an invalid address.\\n        if (newPotentialOwner == address(0)) {\\n            revert NewPotentialOwnerIsZeroAddress(zone);\\n        }\\n\\n        // Ensure the new potential owner is not already set.\\n        if (newPotentialOwner == _signedZones[zone].potentialOwner) {\\n            revert NewPotentialOwnerAlreadySet(zone, newPotentialOwner);\\n        }\\n\\n        // Emit an event indicating that the potential owner has been updated.\\n        emit PotentialOwnerUpdated(newPotentialOwner);\\n\\n        // Set the new potential owner as the potential owner of the zone.\\n        _signedZones[zone].potentialOwner = newPotentialOwner;\\n    }\\n\\n    /**\\n     * @notice Clear the currently set potential owner, if any, from a zone.\\n     *         Only the owner of the zone in question may call this function.\\n     *\\n     * @param zone The zone for which to cancel ownership transfer.\\n     */\\n    function cancelOwnershipTransfer(address zone) external override {\\n        // Ensure the caller is the current owner of the zone in question.\\n        _assertCallerIsZoneOwner(zone);\\n\\n        // Ensure that ownership transfer is currently possible.\\n        if (_signedZones[zone].potentialOwner == address(0)) {\\n            revert NoPotentialOwnerCurrentlySet(zone);\\n        }\\n\\n        // Emit an event indicating that the potential owner has been cleared.\\n        emit PotentialOwnerUpdated(address(0));\\n\\n        // Clear the current new potential owner from the zone.\\n        _signedZones[zone].potentialOwner = address(0);\\n    }\\n\\n    /**\\n     * @notice Accept ownership of a supplied zone. Only accounts that the\\n     *         current owner has set as the new potential owner may call this\\n     *         function.\\n     *\\n     * @param zone The zone for which to accept ownership.\\n     */\\n    function acceptOwnership(address zone) external override {\\n        // Ensure that the zone in question exists.\\n        _assertZoneExists(zone);\\n\\n        // If caller does not match current potential owner of the zone...\\n        if (msg.sender != _signedZones[zone].potentialOwner) {\\n            // Revert, indicating that caller is not current potential owner.\\n            revert CallerIsNotNewPotentialOwner(zone);\\n        }\\n\\n        // Emit an event indicating that the potential owner has been cleared.\\n        emit PotentialOwnerUpdated(address(0));\\n\\n        // Clear the current new potential owner from the zone.\\n        _signedZones[zone].potentialOwner = address(0);\\n\\n        // Emit an event indicating zone ownership has been transferred.\\n        emit OwnershipTransferred(zone, _signedZones[zone].owner, msg.sender);\\n\\n        // Set the caller as the owner of the zone.\\n        _signedZones[zone].owner = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieve the current owner of a deployed zone.\\n     *\\n     * @param zone The zone for which to retrieve the associated owner.\\n     *\\n     * @return owner The owner of the supplied zone.\\n     */\\n    function ownerOf(address zone)\\n        external\\n        view\\n        override\\n        returns (address owner)\\n    {\\n        // Ensure that the zone in question exists.\\n        _assertZoneExists(zone);\\n\\n        // Retrieve the current owner of the zone in question.\\n        owner = _signedZones[zone].owner;\\n    }\\n\\n    /**\\n     * @notice Retrieve the potential owner, if any, for a given zone. The\\n     *         current owner may set a new potential owner via\\n     *         `transferOwnership` and that owner may then accept ownership of\\n     *         the zone in question via `acceptOwnership`.\\n     *\\n     * @param zone The zone for which to retrieve the potential owner.\\n     *\\n     * @return potentialOwner The potential owner, if any, for the zone.\\n     */\\n    function getPotentialOwner(address zone)\\n        external\\n        view\\n        override\\n        returns (address potentialOwner)\\n    {\\n        // Ensure that the zone in question exists.\\n        _assertZoneExists(zone);\\n\\n        // Retrieve the current potential owner of the zone in question.\\n        potentialOwner = _signedZones[zone].potentialOwner;\\n    }\\n\\n    /**\\n     * @notice Returns the active signers for the zone.\\n     *\\n     * @param zone The zone to return the active signers for.\\n     *\\n     * @return signers The active signers.\\n     */\\n    function getActiveSigners(address zone)\\n        external\\n        view\\n        override\\n        returns (address[] memory signers)\\n    {\\n        // Ensure that the zone in question exists.\\n        _assertZoneExists(zone);\\n\\n        // Retrieve storage region where the singers for the signedZone are\\n        // stored.\\n        SignedZoneProperties storage signedZoneProperties = _signedZones[zone];\\n\\n        // Return the active signers for the zone.\\n        signers = signedZoneProperties.activeSignerList;\\n    }\\n\\n    /**\\n     * @notice Update the API endpoint returned by a zone.\\n     *         Only the owner or an active signer of the supplied zone can call\\n     *         this function.\\n     *\\n     * @param zone     The signed zone to update the API endpoint for.\\n     * @param newApiEndpoint The new API endpoint.\\n     */\\n    function updateAPIEndpoint(address zone, string calldata newApiEndpoint)\\n        external\\n        override\\n    {\\n        // Ensure the caller is the owner or an active signer of the signed zone.\\n        _assertCallerIsZoneOwnerOrSigner(zone);\\n\\n        // Retrieve storage region where the singers for the signedZone are\\n        // stored.\\n        SignedZoneProperties storage signedZoneProperties = _signedZones[zone];\\n\\n        // Update the API endpoint on the signed zone.\\n        signedZoneProperties.apiEndpoint = newApiEndpoint;\\n    }\\n\\n    /**\\n     * @notice Add or remove a signer from the supplied zone.\\n     *         Only the owner or an active signer of the supplied zone can call\\n     *         this function.\\n     *\\n     * @param zone     The signed zone to update the signer permissions for.\\n     * @param signer   The signer to update the permissions for.\\n     * @param active   Whether the signer should be active or not.\\n     */\\n    function updateSigner(\\n        address zone,\\n        address signer,\\n        bool active\\n    ) external override {\\n        // Ensure the caller is the owner or an active signer of the signed zone.\\n        _assertCallerIsZoneOwnerOrSigner(zone);\\n\\n        // Retrieve storage region where the singers for the signedZone are\\n        // stored.\\n        SignedZoneProperties storage signedZoneProperties = _signedZones[zone];\\n\\n        // Validate signer permissions.\\n        _assertSignerPermissions(signedZoneProperties, signer, active);\\n\\n        // Update the signer on the signed zone.\\n        SignedZoneInterface(zone).updateSigner(signer, active);\\n\\n        // Update the signer information.\\n        signedZoneProperties.signers[signer].active = active;\\n        signedZoneProperties.signers[signer].previouslyActive = true;\\n        // Add the signer to the list of signers if they are active.\\n        if (active) {\\n            signedZoneProperties.activeSignerList.push(signer);\\n        } else {\\n            // Remove the signer from the list of signers.\\n            for (\\n                uint256 i = 0;\\n                i < signedZoneProperties.activeSignerList.length;\\n\\n            ) {\\n                if (signedZoneProperties.activeSignerList[i] == signer) {\\n                    signedZoneProperties.activeSignerList[\\n                            i\\n                        ] = signedZoneProperties.activeSignerList[\\n                        signedZoneProperties.activeSignerList.length - 1\\n                    ];\\n                    signedZoneProperties.activeSignerList.pop();\\n                    break;\\n                }\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        // Emit an event signifying that the signer was updated.\\n        emit SignerUpdated(zone, signer, active);\\n    }\\n\\n    /**\\n     * @notice Derive the zone address associated with a salt.\\n     *\\n     * @param salt  The salt to be used to derive the zone address.\\n     *\\n     * @return derivedAddress The derived address of the signed zone.\\n     */\\n    function getZone(bytes32 salt)\\n        external\\n        view\\n        override\\n        returns (address derivedAddress)\\n    {\\n        // Derive the SignedZone address from deployer, salt and creation code\\n        // hash.\\n        derivedAddress = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            bytes1(0xff),\\n                            address(this),\\n                            salt,\\n                            _SIGNED_ZONE_CREATION_CODE_HASH\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice External call to return the signing information, substandards,\\n     *         and documentation about the zone.\\n     *\\n     * @return domainSeparator  The domain separator used for signing.\\n     * @return zoneName         The name of the zone.\\n     * @return apiEndpoint      The API endpoint for the zone.\\n     * @return substandards     The substandards supported by the zone.\\n     * @return documentationURI The documentation URI for the zone.\\n     */\\n    function getAdditionalZoneInformation(address zone)\\n        external\\n        view\\n        override\\n        returns (\\n            bytes32 domainSeparator,\\n            string memory zoneName,\\n            string memory apiEndpoint,\\n            uint256[] memory substandards,\\n            string memory documentationURI\\n        )\\n    {\\n        // Ensure the zone exists.\\n        _assertZoneExists(zone);\\n\\n        // Return the zone's additional information.\\n        return _additionalZoneInformation(zone);\\n    }\\n\\n    /**\\n     * @notice Internal call to return the signing information, substandards,\\n     *         and documentation about the zone.\\n     *\\n     * @return domainSeparator  The domain separator used for signing.\\n     * @return zoneName         The name of the zone.\\n     * @return apiEndpoint      The API endpoint for the zone.\\n     * @return substandards     The substandards supported by the zone.\\n     * @return documentationURI The documentation URI for the zone.\\n     */\\n    function _additionalZoneInformation(address zone)\\n        internal\\n        view\\n        returns (\\n            bytes32 domainSeparator,\\n            string memory zoneName,\\n            string memory apiEndpoint,\\n            uint256[] memory substandards,\\n            string memory documentationURI\\n        )\\n    {\\n        // Get the zone properties.\\n        SignedZoneProperties storage signedZoneProperties = _signedZones[zone];\\n\\n        // Return the SIP-7 information.\\n        domainSeparator = _domainSeparator(zone);\\n        zoneName = signedZoneProperties.zoneName;\\n        apiEndpoint = signedZoneProperties.apiEndpoint;\\n        substandards = signedZoneProperties.substandards;\\n        documentationURI = signedZoneProperties.documentationURI;\\n    }\\n\\n    /**\\n     * @dev Internal view function to get the EIP-712 domain separator. If the\\n     *      chainId matches the chainId set on deployment, the cached domain\\n     *      separator will be returned; otherwise, it will be derived from\\n     *      scratch.\\n     *\\n     * @return The domain separator.\\n     */\\n    function _domainSeparator(address zone) internal view returns (bytes32) {\\n        // prettier-ignore\\n        return _deriveDomainSeparator(zone);\\n    }\\n\\n    /**\\n     * @dev Internal view function to derive the EIP-712 domain separator.\\n     *\\n     * @return domainSeparator The derived domain separator.\\n     */\\n    function _deriveDomainSeparator(address zone)\\n        internal\\n        view\\n        returns (bytes32 domainSeparator)\\n    {\\n        bytes32 typehash = _EIP_712_DOMAIN_TYPEHASH;\\n        bytes32 nameHash = _NAME_HASH;\\n        bytes32 versionHash = _VERSION_HASH;\\n\\n        // Leverage scratch space and other memory to perform an efficient hash.\\n        assembly {\\n            // Retrieve the free memory pointer; it will be replaced afterwards.\\n            let freeMemoryPointer := mload(FreeMemoryPointerSlot)\\n\\n            // Retrieve value at 0x80; it will also be replaced afterwards.\\n            let slot0x80 := mload(Slot0x80)\\n\\n            // Place typehash, name hash, and version hash at start of memory.\\n            mstore(0, typehash)\\n            mstore(OneWord, nameHash)\\n            mstore(TwoWords, versionHash)\\n\\n            // Place chainId in the next memory location.\\n            mstore(ThreeWords, chainid())\\n\\n            // Place the address of the signed zone contract in the next memory location.\\n            mstore(FourWords, zone)\\n\\n            // Hash relevant region of memory to derive the domain separator.\\n            domainSeparator := keccak256(0, FiveWords)\\n\\n            // Restore the free memory pointer.\\n            mstore(FreeMemoryPointerSlot, freeMemoryPointer)\\n\\n            // Restore the zero slot to zero.\\n            mstore(ZeroSlot, 0)\\n\\n            // Restore the value at 0x80.\\n            mstore(Slot0x80, slot0x80)\\n        }\\n    }\\n\\n    /**\\n     * @dev Private view function to revert if the caller is not the owner of a\\n     *      given zone.\\n     *\\n     * @param zone The zone for which to assert ownership.\\n     */\\n    function _assertCallerIsZoneOwner(address zone) private view {\\n        // Ensure that the zone in question exists.\\n        _assertZoneExists(zone);\\n\\n        // If the caller does not match the current owner of the zone...\\n        if (msg.sender != _signedZones[zone].owner) {\\n            // Revert, indicating that the caller is not the owner.\\n            revert CallerIsNotOwner(zone);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private view function to revert if the caller is not the owner or\\n     *      an active signer of a given zone.\\n     *\\n     * @param zone The zone for which to assert ownership.\\n     */\\n    function _assertCallerIsZoneOwnerOrSigner(address zone) private view {\\n        // Ensure that the zone in question exists.\\n        _assertZoneExists(zone);\\n\\n        // Initialize storage variable referencing signed zone properties.\\n        SignedZoneProperties storage signedZoneProperties = _signedZones[zone];\\n\\n        // Ensure the caller is the owner or an active signer of the signed zone.\\n        if (\\n            msg.sender != _signedZones[zone].owner &&\\n            !signedZoneProperties.signers[msg.sender].active\\n        ) {\\n            // Revert, indicating that the caller is not the owner.\\n            revert CallerIsNotOwnerOrSigner(zone);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private view function to revert if a given zone does not exist.\\n     *\\n     * @param zone The zone for which to assert existence.\\n     */\\n    function _assertZoneExists(address zone) private view {\\n        // Attempt to retrieve a the owner for the zone in question.\\n        if (_signedZones[zone].owner == address(0)) {\\n            // Revert if no ownerwas located.\\n            revert NoZone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Private view function to revert if a signer being added to a zone\\n     *      is the zero address or the signer already exists, or the signer was\\n     *      previously authorized.  If the signer is being removed, the\\n     *      function will revert if the signer is not active.\\n     *\\n     * @param signedZoneProperties The signed zone properties for the zone.\\n     * @param signer The signer to add or remove.\\n     * @param active Whether the signer is being added or removed.\\n     */\\n    function _assertSignerPermissions(\\n        SignedZoneProperties storage signedZoneProperties,\\n        address signer,\\n        bool active\\n    ) private view {\\n        // If the signer is being added...\\n        if (active) {\\n            // Do not allow the zero address to be added as a signer.\\n            if (signer == address(0)) {\\n                revert SignerCannotBeZeroAddress();\\n            }\\n\\n            // Revert if the signer is already added.\\n            if (signedZoneProperties.signers[signer].active) {\\n                revert SignerAlreadyAdded(signer);\\n            }\\n\\n            // Revert if the signer was previously authorized.\\n            if (signedZoneProperties.signers[signer].previouslyActive) {\\n                revert SignerCannotBeReauthorized(signer);\\n            }\\n        } else {\\n            // Revert if the signer is not active.\\n            if (!signedZoneProperties.signers[signer].active) {\\n                revert SignerNotPresent(signer);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x638e6e6f8797d465763b72aef29aa7562a04a6afa0526653ae79116850245a01\",\"license\":\"MIT\"},\"src/zones/interfaces/SIP5Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { Schema } from \\\"../../lib/ConsiderationStructs.sol\\\";\\n\\n/**\\n * @dev SIP-5: Contract Metadata Interface for Seaport Contracts\\n *      https://github.com/ProjectOpenSea/SIPs/blob/main/SIPS/sip-5.md\\n */\\ninterface SIP5Interface {\\n    /**\\n     * @dev An event that is emitted when a SIP-5 compatible contract is deployed.\\n     */\\n    event SeaportCompatibleContractDeployed();\\n\\n    /**\\n     * @dev Returns Seaport metadata for this contract, returning the\\n     *      contract name and supported schemas.\\n     *\\n     * @return name    The contract name\\n     * @return schemas The supported SIPs\\n     */\\n    function getSeaportMetadata()\\n        external\\n        view\\n        returns (string memory name, Schema[] memory schemas);\\n}\\n\",\"keccak256\":\"0x1f3870f919a37f578fc9ee39327910f593103152a9ba924ba815b9c7701e0f90\",\"license\":\"MIT\"},\"src/zones/interfaces/SignedZoneControllerEventsAndErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/**\\n * @notice SignedZoneControllerEventsAndErrors contains errors and events\\n *         related to deploying and managing new signed zones.\\n */\\ninterface SignedZoneControllerEventsAndErrors {\\n    /**\\n     * @dev Emit an event whenever a new zone is created.\\n     *\\n     * @param zoneAddress The address of the zone.\\n     * @param zoneName    The name for the zone returned in\\n     *                    getSeaportMetadata().\\n     * @param apiEndpoint The API endpoint where orders for this zone can be\\n     *                    signed.\\n     * @param documentationURI The URI to the documentation describing the\\n     *                         behavior of the contract.\\n     *                    Request and response payloads are defined in SIP-7.\\n     * @param salt        The salt used to deploy the zone.\\n     */\\n    event ZoneCreated(\\n        address zoneAddress,\\n        string zoneName,\\n        string apiEndpoint,\\n        string documentationURI,\\n        bytes32 salt\\n    );\\n\\n    /**\\n     * @dev Emit an event whenever zone ownership is transferred.\\n     *\\n     * @param zone          The zone for which ownership has been\\n     *                      transferred.\\n     * @param previousOwner The previous owner of the zone.\\n     * @param newOwner      The new owner of the zone.\\n     */\\n    event OwnershipTransferred(\\n        address indexed zone,\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Emit an event whenever a zone owner registers a new potential\\n     *      owner for that zone.\\n     *\\n     * @param newPotentialOwner The new potential owner of the zone.\\n     */\\n    event PotentialOwnerUpdated(address indexed newPotentialOwner);\\n\\n    /**\\n     * @dev Emit an event when a signer has been updated.\\n     */\\n    event SignerUpdated(address signedZone, address signer, bool active);\\n\\n    /**\\n     * @dev Revert with an error when attempting to update channels or transfer\\n     *      ownership of a zone when the caller is not the owner of the\\n     *      zone in question.\\n     */\\n    error CallerIsNotOwner(address zone);\\n\\n    /**\\n     * @dev Revert with an error when the caller is not the owner or an active\\n     *      signer of the signed zone in question.\\n     */\\n    error CallerIsNotOwnerOrSigner(address zone);\\n\\n    /**\\n     * @dev Revert with an error when attempting to claim ownership of a zone\\n     *      with a caller that is not the current potential owner for the\\n     *      zone in question.\\n     */\\n    error CallerIsNotNewPotentialOwner(address zone);\\n\\n    /**\\n     * @dev Revert with an error when attempting to create a new signed zone\\n     *      using a salt where the first twenty bytes do not match the address\\n     *      of the caller or are not set to zero.\\n     */\\n    error InvalidCreator();\\n\\n    /**\\n     * @dev Revert with an error when attempting to create a new zone when no\\n     *      initial owner address is supplied.\\n     */\\n    error InvalidInitialOwner();\\n\\n    /**\\n     * @dev Revert with an error when attempting to set a new potential owner\\n     *      that is already set.\\n     */\\n    error NewPotentialOwnerAlreadySet(address zone, address newPotentialOwner);\\n\\n    /**\\n     * @dev Revert with an error when attempting to cancel ownership transfer\\n     *      when no new potential owner is currently set.\\n     */\\n    error NoPotentialOwnerCurrentlySet(address zone);\\n    /**\\n     * @dev Revert with an error when attempting to register a new potential\\n     *      owner and supplying the null address.\\n     */\\n    error NewPotentialOwnerIsZeroAddress(address zone);\\n\\n    /**\\n     * @dev Revert with an error when attempting to interact with a zone that\\n     *      does not yet exist.\\n     */\\n    error NoZone();\\n\\n    /**\\n     * @dev Revert with an error if trying to add a signer that is\\n     *      already active.\\n     */\\n    error SignerAlreadyAdded(address signer);\\n\\n    /**\\n     * @dev Revert with an error if a new signer is the zero address.\\n     */\\n    error SignerCannotBeZeroAddress();\\n\\n    /**\\n     * @dev Revert with an error if a removed signer is trying to be\\n     *      reauthorized.\\n     */\\n    error SignerCannotBeReauthorized(address signer);\\n\\n    /**\\n     * @dev Revert with an error if trying to remove a signer that is\\n     *      not present.\\n     */\\n    error SignerNotPresent(address signer);\\n\\n    /**\\n     * @dev Revert with an error when attempting to deploy a zone that is\\n     *      currently deployed.\\n     */\\n    error ZoneAlreadyExists(address zone);\\n}\\n\",\"keccak256\":\"0x0ac3c48c690e3f51e85ad23886f903e26e8acfb0d3308da797a05ad1002543a0\",\"license\":\"MIT\"},\"src/zones/interfaces/SignedZoneControllerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title  SignedZoneControllerInterface\\n * @author BCLeFevre\\n * @notice SignedZoneControllerInterface enables the deploying of SignedZones.\\n *         SignedZones are an implementation of SIP-7 that requires orders\\n *         to be signed by an approved signer.\\n *         https://github.com/ProjectOpenSea/SIPs/blob/main/SIPS/sip-7.md\\n *\\n */\\ninterface SignedZoneControllerInterface {\\n    /**\\n     * @notice Deploy a SignedZone to a precomputed address.\\n     *\\n     * @param zoneName    The name for the zone returned in\\n     *                    getSeaportMetadata().\\n     * @param apiEndpoint The API endpoint where orders for this zone can be\\n     *                    signed.\\n     * @param documentationURI The URI to the documentation describing the\\n     *                         behavior of the contract.\\n     *                    Request and response payloads are defined in SIP-7.\\n     * @param salt        The salt to be used to derive the zone address\\n     * @param initialOwner The initial owner to set for the new zone.\\n     *\\n     * @return derivedAddress The derived address for the zone.\\n     */\\n    function createZone(\\n        string memory zoneName,\\n        string memory apiEndpoint,\\n        string memory documentationURI,\\n        address initialOwner,\\n        bytes32 salt\\n    ) external returns (address derivedAddress);\\n\\n    /**\\n     * @notice Returns the active signers for the zone.\\n     *\\n     * @param signedZone The signed zone to get the active signers for.\\n     *\\n     * @return signers The active signers.\\n     */\\n    function getActiveSigners(address signedZone)\\n        external\\n        view\\n        returns (address[] memory signers);\\n\\n    /**\\n     * @notice Returns additional information about the zone.\\n     *\\n     * @param zone The zone to get the additional information for.\\n     *\\n     * @return domainSeparator  The domain separator used for signing.\\n     * @return zoneName         The name of the zone.\\n     * @return apiEndpoint      The API endpoint for the zone.\\n     * @return substandards     The substandards supported by the zone.\\n     * @return documentationURI The documentation URI for the zone.\\n     */\\n    function getAdditionalZoneInformation(address zone)\\n        external\\n        view\\n        returns (\\n            bytes32 domainSeparator,\\n            string memory zoneName,\\n            string memory apiEndpoint,\\n            uint256[] memory substandards,\\n            string memory documentationURI\\n        );\\n\\n    /**\\n     * @notice Update the API endpoint returned by the supplied zone.\\n     *         Only the owner or an active signer can call this function.\\n     *\\n     * @param signedZone    The signed zone to update the API endpoint for.\\n     * @param newApiEndpoint The new API endpoint.\\n     */\\n    function updateAPIEndpoint(\\n        address signedZone,\\n        string calldata newApiEndpoint\\n    ) external;\\n\\n    /**\\n     * @notice Update the signer for a given signed zone.\\n     *\\n     * @param signedZone The signed zone to update the signer for.\\n     * @param signer     The signer to update.\\n     * @param active     If the signer should be active or not.\\n     */\\n    function updateSigner(\\n        address signedZone,\\n        address signer,\\n        bool active\\n    ) external;\\n\\n    /**\\n     * @notice Initiate zone ownership transfer by assigning a new potential\\n     *         owner for the given zone. Once set, the new potential owner\\n     *         may call `acceptOwnership` to claim ownership of the zone.\\n     *         Only the owner of the zone in question may call this function.\\n     *\\n     * @param zone The zone for which to initiate ownership transfer.\\n     * @param newPotentialOwner The new potential owner of the zone.\\n     */\\n    function transferOwnership(address zone, address newPotentialOwner)\\n        external;\\n\\n    /**\\n     * @notice Clear the currently set potential owner, if any, from a zone.\\n     *         Only the owner of the zone in question may call this function.\\n     *\\n     * @param zone The zone for which to cancel ownership transfer.\\n     */\\n    function cancelOwnershipTransfer(address zone) external;\\n\\n    /**\\n     * @notice Accept ownership of a supplied zone. Only accounts that the\\n     *         current owner has set as the new potential owner may call this\\n     *         function.\\n     *\\n     * @param zone The zone for which to accept ownership.\\n     */\\n    function acceptOwnership(address zone) external;\\n\\n    /**\\n     * @notice Retrieve the current owner of a deployed zone.\\n     *\\n     * @param zone The zone for which to retrieve the associated owner.\\n     *\\n     * @return owner The owner of the supplied zone.\\n     */\\n    function ownerOf(address zone) external view returns (address owner);\\n\\n    /**\\n     * @notice Retrieve the potential owner, if any, for a given zone. The\\n     *         current owner may set a new potential owner via\\n     *         `transferOwnership` and that owner may then accept ownership of\\n     *         the zone in question via `acceptOwnership`.\\n     *\\n     * @param zone The zone for which to retrieve the potential owner.\\n     *\\n     * @return potentialOwner The potential owner, if any, for the zone.\\n     */\\n    function getPotentialOwner(address zone)\\n        external\\n        view\\n        returns (address potentialOwner);\\n\\n    /**\\n     * @notice Derive the zone address associated with a salt.\\n     *\\n     * @param salt        The salt to be used to derive the zone address\\n     *\\n     * @return derivedAddress The derived address of the signed zone.\\n     */\\n    function getZone(bytes32 salt)\\n        external\\n        view\\n        returns (address derivedAddress);\\n}\\n\",\"keccak256\":\"0xcd7d8afecf29aa78458e4373ec2cef2a07e0c3fd904b08b813c2a21e9fdec601\",\"license\":\"MIT\"},\"src/zones/interfaces/SignedZoneEventsAndErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/**\\n * @notice SignedZoneEventsAndErrors contains errors and events\\n *         related to zone interaction.\\n */\\ninterface SignedZoneEventsAndErrors {\\n    /**\\n     * @dev Emit an event when a new signer is added.\\n     */\\n    event SignerAdded(address signer);\\n\\n    /**\\n     * @dev Emit an event when a signer is removed.\\n     */\\n    event SignerRemoved(address signer);\\n\\n    /**\\n     * @dev Revert with an error if msg.sender is not the owner\\n     *      or an active signer.\\n     */\\n    error OnlyOwnerOrActiveSigner();\\n\\n    /**\\n     * @dev Revert with an error when the signature has expired.\\n     */\\n    error SignatureExpired(uint256 expiration, bytes32 orderHash);\\n\\n    /**\\n     * @dev Revert with an error when attempting to update the signers of a\\n     *      the zone from a caller that is not the zone's controller.\\n     */\\n    error InvalidController();\\n\\n    /**\\n     * @dev Revert with an error if supplied order extraData is an invalid\\n     *      length.\\n     */\\n    error InvalidExtraDataLength(bytes32 orderHash);\\n\\n    /**\\n     * @dev Revert with an error if the supplied order extraData does not\\n     *      support the zone's SIP6 version.\\n     */\\n    error InvalidSIP6Version(bytes32 orderHash);\\n\\n    /**\\n     * @dev Revert with an error if the supplied order extraData does not\\n     *      support the zone's substandard requirements.\\n     */\\n    error InvalidSubstandardSupport(\\n        string reason,\\n        uint256 substandardVersion,\\n        bytes32 orderHash\\n    );\\n\\n    /**\\n     * @dev Revert with an error if the supplied order extraData does not\\n     *      support the zone's substandard version.\\n     */\\n    error InvalidSubstandardVersion(bytes32 orderHash);\\n\\n    /**\\n     * @dev Revert with an error if the fulfiller does not match.\\n     */\\n    error InvalidFulfiller(\\n        address expectedFulfiller,\\n        address actualFulfiller,\\n        bytes32 orderHash\\n    );\\n\\n    /**\\n     * @dev Revert with an error if the consideration does not match.\\n     */\\n    error InvalidConsideration(\\n        uint256 expectedConsiderationHash,\\n        uint256 actualConsiderationHash,\\n        bytes32 orderHash\\n    );\\n\\n    /**\\n     * @dev Revert with an error if the zone parameter encoding is invalid.\\n     */\\n    error InvalidZoneParameterEncoding();\\n\\n    /**\\n     * @dev Revert with an error when an order is signed with a signer\\n     *      that is not active.\\n     */\\n    error SignerNotActive(address signer, bytes32 orderHash);\\n}\\n\",\"keccak256\":\"0xe7038a72bed562b2fe13231c294bf149c2964a81880ccdab9c58de4203a85c25\",\"license\":\"MIT\"},\"src/zones/interfaces/SignedZoneInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title  SignedZone\\n * @author ryanio, BCLeFevre\\n * @notice SignedZone is an implementation of SIP-7 that requires orders\\n *         to be signed by an approved signer.\\n *         https://github.com/ProjectOpenSea/SIPs/blob/main/SIPS/sip-7.md\\n *\\n */\\ninterface SignedZoneInterface {\\n    /**\\n     * @notice Update the active status of a signer.\\n     *\\n     * @param signer The signer address to update.\\n     * @param active The new active status of the signer.\\n     */\\n    function updateSigner(address signer, bool active) external;\\n\\n    /**\\n     * @notice Returns the active signers for the zone.\\n     *\\n     * @return signers The active signers.\\n     */\\n    function getActiveSigners()\\n        external\\n        view\\n        returns (address[] memory signers);\\n}\\n\",\"keccak256\":\"0x2c970d397d3b4d1f7ccc8565d280baf1a2ad9f16163a0918c42f0502b002ee83\",\"license\":\"MIT\"},\"src/zones/lib/SignedZoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/// @dev ECDSA signature offsets.\\nuint256 constant ECDSA_MaxLength = 65;\\nuint256 constant ECDSA_signature_s_offset = 0x40;\\nuint256 constant ECDSA_signature_v_offset = 0x60;\\n\\n/// @dev Helpers for memory offsets.\\nuint256 constant OneWord = 0x20;\\nuint256 constant TwoWords = 0x40;\\nuint256 constant ThreeWords = 0x60;\\nuint256 constant FourWords = 0x80;\\nuint256 constant FiveWords = 0xa0;\\nuint256 constant Signature_lower_v = 27;\\nuint256 constant MaxUint8 = 0xff;\\nbytes32 constant EIP2098_allButHighestBitMask = (\\n    0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n);\\nuint256 constant Ecrecover_precompile = 1;\\nuint256 constant Ecrecover_args_size = 0x80;\\nuint256 constant FreeMemoryPointerSlot = 0x40;\\nuint256 constant ZeroSlot = 0x60;\\nuint256 constant Slot0x80 = 0x80;\\n\\n/// @dev The EIP-712 digest offsets.\\nuint256 constant EIP712_DomainSeparator_offset = 0x02;\\nuint256 constant EIP712_SignedOrderHash_offset = 0x22;\\nuint256 constant EIP712_DigestPayload_size = 0x42;\\nuint256 constant EIP_712_PREFIX = (\\n    0x1901000000000000000000000000000000000000000000000000000000000000\\n);\\n\\n/*\\n *  error InvalidController()\\n *    - Defined in SignedZoneEventsAndErrors.sol\\n *  Memory layout:\\n *    - 0x00: Left-padded selector (data begins at 0x1c)\\n * Revert buffer is memory[0x1c:0x20]\\n */\\nuint256 constant InvalidController_error_selector = 0x6d5769be;\\nuint256 constant InvalidController_error_length = 0x04;\\n\\n/*\\n *  error InvalidFulfiller(address expectedFulfiller, address actualFulfiller, bytes32 orderHash)\\n *    - Defined in SignedZoneEventsAndErrors.sol\\n *  Memory layout:\\n *    - 0x00: Left-padded selector (data begins at 0x1c)\\n *    - 0x20: expectedFulfiller\\n *    - 0x40: actualFullfiller\\n *    - 0x60: orderHash\\n * Revert buffer is memory[0x1c:0x80]\\n */\\nuint256 constant InvalidFulfiller_error_selector = 0x1bcf9bb7;\\nuint256 constant InvalidFulfiller_error_expectedFulfiller_ptr = 0x20;\\nuint256 constant InvalidFulfiller_error_actualFulfiller_ptr = 0x40;\\nuint256 constant InvalidFulfiller_error_orderHash_ptr = 0x60;\\nuint256 constant InvalidFulfiller_error_length = 0x64;\\n\\n/*\\n *  error InvalidConsideration(uint256 expectedConsideration, uint256 actualConsideration, bytes32 orderHash)\\n *    - Defined in SignedZoneEventsAndErrors.sol\\n *  Memory layout:\\n *    - 0x00: Left-padded selector (data begins at 0x1c)\\n *    - 0x20: expectedConsideration\\n *    - 0x40: actualConsideration\\n *    - 0x60: orderHash\\n * Revert buffer is memory[0x1c:0x80]\\n */\\nuint256 constant InvalidConsideration_error_selector = 0x59cb96d1;\\nuint256 constant InvalidConsideration_error_expectedConsideration_ptr = 0x20;\\nuint256 constant InvalidConsideration_error_actualConsideration_ptr = 0x40;\\nuint256 constant InvalidConsideration_error_orderHash_ptr = 0x60;\\nuint256 constant InvalidConsideration_error_length = 0x64;\\n\\n/*\\n *  error InvalidZoneParameterEncoding()\\n *    - Defined in SignedZoneEventsAndErrors.sol\\n *  Memory layout:\\n *    - 0x00: Left-padded selector (data begins at 0x1c)\\n * Revert buffer is memory[0x1c:0x20]\\n */\\nuint256 constant InvalidZoneParameterEncoding_error_selector = 0x46d5d895;\\nuint256 constant InvalidZoneParameterEncoding_error_length = 0x04;\\n\\n/*\\n * error InvalidExtraDataLength()\\n *   - Defined in SignedZoneEventsAndErrors.sol\\n * Memory layout:\\n *   - 0x00: Left-padded selector (data begins at 0x1c)\\n *   - 0x20: orderHash\\n * Revert buffer is memory[0x1c:0x40]\\n */\\nuint256 constant InvalidExtraDataLength_error_selector = 0xd232fd2c;\\nuint256 constant InvalidExtraDataLength_error_orderHash_ptr = 0x20;\\nuint256 constant InvalidExtraDataLength_error_length = 0x24;\\nuint256 constant InvalidExtraDataLength_epected_length = 0x7e;\\n\\nuint256 constant ExtraData_expiration_offset = 0x35;\\nuint256 constant ExtraData_substandard_version_byte_offset = 0x7d;\\n/*\\n *  error InvalidSIP6Version()\\n *    - Defined in SignedZoneEventsAndErrors.sol\\n *  Memory layout:\\n *    - 0x00: Left-padded selector (data begins at 0x1c)\\n *    - 0x20: orderHash\\n * Revert buffer is memory[0x1c:0x40]\\n */\\nuint256 constant InvalidSIP6Version_error_selector = 0x64115774;\\nuint256 constant InvalidSIP6Version_error_orderHash_ptr = 0x20;\\nuint256 constant InvalidSIP6Version_error_length = 0x24;\\n\\n/*\\n *  error InvalidSubstandardVersion()\\n *    - Defined in SignedZoneEventsAndErrors.sol\\n *  Memory layout:\\n *    - 0x00: Left-padded selector (data begins at 0x1c)\\n *    - 0x20: orderHash\\n * Revert buffer is memory[0x1c:0x40]\\n */\\nuint256 constant InvalidSubstandardVersion_error_selector = 0x26787999;\\nuint256 constant InvalidSubstandardVersion_error_orderHash_ptr = 0x20;\\nuint256 constant InvalidSubstandardVersion_error_length = 0x24;\\n\\n/*\\n *  error InvalidSubstandardSupport()\\n *    - Defined in SignedZoneEventsAndErrors.sol\\n *  Memory layout:\\n *    - 0x00: Left-padded selector (data begins at 0x1c)\\n *    - 0x20: reason\\n *    - 0x40: substandardVersion\\n *    - 0x60: orderHash\\n * Revert buffer is memory[0x1c:0xe0]\\n */\\nuint256 constant InvalidSubstandardSupport_error_selector = 0x2be76224;\\nuint256 constant InvalidSubstandardSupport_error_reason_offset_ptr = 0x20;\\nuint256 constant InvalidSubstandardSupport_error_substandard_version_ptr = 0x40;\\nuint256 constant InvalidSubstandardSupport_error_orderHash_ptr = 0x60;\\nuint256 constant InvalidSubstandardSupport_error_reason_length_ptr = 0x80;\\nuint256 constant InvalidSubstandardSupport_error_reason_ptr = 0xa0;\\nuint256 constant InvalidSubstandardSupport_error_reason_2_ptr = 0xc0;\\nuint256 constant InvalidSubstandardSupport_error_length = 0xc4;\\n\\n/*\\n * error SignatureExpired()\\n *   - Defined in SignedZoneEventsAndErrors.sol\\n * Memory layout:\\n *   - 0x00: Left-padded selector (data begins at 0x1c)\\n *   - 0x20: expiration\\n *   - 0x40: orderHash\\n * Revert buffer is memory[0x1c:0x60]\\n */\\nuint256 constant SignatureExpired_error_selector = 0x16546071;\\nuint256 constant SignatureExpired_error_expiration_ptr = 0x20;\\nuint256 constant SignatureExpired_error_orderHash_ptr = 0x40;\\nuint256 constant SignatureExpired_error_length = 0x44;\\n\\n// Zone parameter calldata pointers\\nuint256 constant Zone_parameters_cdPtr = 0x04;\\nuint256 constant Zone_parameters_fulfiller_cdPtr = 0x44;\\nuint256 constant Zone_consideration_head_cdPtr = 0xa4;\\nuint256 constant Zone_extraData_cdPtr = 0xc4;\\n\\n// Zone parameter memory pointers\\nuint256 constant Zone_parameters_ptr = 0x20;\\n\\n// Zone parameter offsets\\nuint256 constant Zone_parameters_offset = 0x24;\\nuint256 constant expectedFulfiller_offset = 0x45;\\nuint256 constant actualConsideration_offset = 0x84;\\nuint256 constant expectedConsideration_offset = 0xa2;\\n\",\"keccak256\":\"0xcb05eb61b07c7b7ab94762964250abaeb2fefb6ba5ccfd2def77d875463ea23d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600a61012052695369676e65645a6f6e6560b01b610140527f0aa333075d560d6d2e102e9d7afe8a8ba8b4a3ec41e19473caad880f9eb5fbe6608052600361016052620312e360ec1b610180527fe6bbd6277e1bf288eed5e8d1780f9a50b239e86b153736bceebccf4ea79d90b360a0526c08a92a06e626488dedac2d2dc5609b1b6101c09081526b1cdd1c9a5b99c81b985b594b60a21b6101cd526e1cdd1c9a5b99c81d995c9cda5bdb8b608a1b6101d9526f1d5a5b9d0c8d4d8818da185a5b92590b60821b6101e8527f6164647265737320766572696679696e67436f6e7472616374000000000000006101f852602960f81b6102115260526101a0819052610212604052902060c0524660e05234801561011b57600080fd5b5060405161012b60208201610150565b601f1982820381018352601f909101166040528051602091909101206101005261015d565b611b89806136e983390190565b60805160a05160c05160e051610100516135446101a5600039600081816101b301526103a801526000505060006111ea015260006112340152600061121001526135446000f3fe60806040523480156200001157600080fd5b5060043610620000d95760003560e01c806366a2489f116200008b578063906c87cc1162000062578063906c87cc1462000268578063dca09383146200027f578063e89fad58146200029657600080fd5b806366a2489f14620002145780636d435421146200023a5780637b37e561146200025157600080fd5b806314afd79e11620000c057806314afd79e14620001415780634b42e8d5146200015857806351710e4514620001fb57600080fd5b806304789c9814620000de5780630eb925161462000111575b600080fd5b620000f5620000ef3660046200130a565b620002ad565b6040516200010895949392919062001377565b60405180910390f35b6200012862000122366004620014ad565b620002dd565b6040516001600160a01b03909116815260200162000108565b62000128620001523660046200130a565b62000582565b62000128620001693660046200155a565b6040517fff0000000000000000000000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff193060601b166021820152603581018290527f0000000000000000000000000000000000000000000000000000000000000000605582015260009060750160408051601f19818403018152919052805160209091012092915050565b620002126200020c3660046200130a565b620005ae565b005b6200022b620002253660046200130a565b620006e4565b60405162000108919062001574565b620002126200024b366004620015c3565b6200076e565b62000212620002623660046200130a565b620008a6565b62000128620002793660046200130a565b62000974565b6200021262000290366004620015fb565b620009a3565b62000212620002a73660046200164d565b62000c87565b6000606080606080620002c08662000cc2565b620002cb8662000d17565b939a9299509097509550909350915050565b60006001600160a01b03831662000320576040517f99faaa0400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606082901c33146200035e576040517fcb6e534400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fff0000000000000000000000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff193060601b166021820152603581018390527f0000000000000000000000000000000000000000000000000000000000000000605582015260750160408051601f19818403018152919052805160209091012090506001600160a01b0381163b156200043b576040517e8343850000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024015b60405180910390fd5b816040516200044a9062001273565b8190604051809103906000f59050801580156200046b573d6000803e3d6000fd5b50506001600160a01b038181166000908152602081905260409020805473ffffffffffffffffffffffffffffffffffffffff191691851691909117815560028101620004b8888262001765565b5060038101620004c9878262001765565b5060048101620004da868262001765565b50604080516020810190915260038152620004fc906005830190600162001281565b507f106160dca18b77e6926325d074dd8328fbec25f496d6fd313ef44f3e581e2afe82888888876040516200053695949392919062001832565b60405180910390a16040516001600160a01b03808616916000918516907fc8894f26f396ce8c004245c8b7cd1b92103a6e4302fcbab883987149ac01b7ec908390a45095945050505050565b60006200058f8262000cc2565b506001600160a01b039081166000908152602081905260409020541690565b620005b98162000cc2565b6001600160a01b038181166000908152602081905260409020600101541633146200061c576040517f88c3a1150000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240162000432565b6040516000907f11a3cf439fb225bfe74225716b6774765670ec1060e3796802e62139d69974da908290a26001600160a01b0380821660008181526020819052604080822060018101805473ffffffffffffffffffffffffffffffffffffffff1916905554905133949190911692917fc8894f26f396ce8c004245c8b7cd1b92103a6e4302fcbab883987149ac01b7ec91a46001600160a01b03166000908152602081905260409020805473ffffffffffffffffffffffffffffffffffffffff191633179055565b6060620006f18262000cc2565b6001600160a01b038216600090815260208181526040918290206007810180548451818502810185019095528085529193929091908301828280156200076157602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000742575b5050505050915050919050565b620007798262000f6b565b6001600160a01b038116620007c6576040517fa388d2630000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240162000432565b6001600160a01b0380831660009081526020819052604090206001015481169082160362000834576040517fcbc080ca0000000000000000000000000000000000000000000000000000000081526001600160a01b0380841660048301528216602482015260440162000432565b6040516001600160a01b038216907f11a3cf439fb225bfe74225716b6774765670ec1060e3796802e62139d69974da90600090a26001600160a01b039182166000908152602081905260409020600101805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b620008b18162000f6b565b6001600160a01b038181166000908152602081905260409020600101541662000912576040517f6b0136160000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240162000432565b6040516000907f11a3cf439fb225bfe74225716b6774765670ec1060e3796802e62139d69974da908290a26001600160a01b03166000908152602081905260409020600101805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000620009818262000cc2565b506001600160a01b039081166000908152602081905260409020600101541690565b620009ae8362000fd6565b6001600160a01b0383166000908152602081905260409020620009d381848462001069565b6040517ff460590b0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152831515602483015285169063f460590b90604401600060405180830381600087803b15801562000a3857600080fd5b505af115801562000a4d573d6000803e3d6000fd5b505050506001600160a01b0383166000908152600682016020526040902080546101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000909116841580157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16919091179190911790915562000b0d576007810180546001810182556000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03851617905562000c36565b60005b600782015481101562000c3457836001600160a01b031682600701828154811062000b3f5762000b3f62001893565b6000918252602090912001546001600160a01b03160362000c2b5760078201805462000b6e90600190620018a9565b8154811062000b815762000b8162001893565b6000918252602090912001546007830180546001600160a01b03909216918390811062000bb25762000bb262001893565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160070180548062000bf65762000bf6620018cb565b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff1916905501905562000c34565b60010162000b10565b505b604080516001600160a01b038681168252851660208201528315158183015290517fb658b57f3a8d73a4f3bb96789edcebed831f44d5cc4a513d4416c6bb25ea0e8b9181900360600190a150505050565b62000c928362000fd6565b6001600160a01b03831660009081526020819052604090206003810162000cbb838583620018e1565b5050505050565b6001600160a01b038181166000908152602081905260409020541662000d14576040517fb1a69e4800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6001600160a01b038116600090815260208190526040812060609081908190819062000d4387620011e0565b955080600201805462000d5690620016d7565b80601f016020809104026020016040519081016040528092919081815260200182805462000d8490620016d7565b801562000dd55780601f1062000da95761010080835404028352916020019162000dd5565b820191906000526020600020905b81548152906001019060200180831162000db757829003601f168201915b5050505050945080600301805462000ded90620016d7565b80601f016020809104026020016040519081016040528092919081815260200182805462000e1b90620016d7565b801562000e6c5780601f1062000e405761010080835404028352916020019162000e6c565b820191906000526020600020905b81548152906001019060200180831162000e4e57829003601f168201915b505050505093508060050180548060200260200160405190810160405280929190818152602001828054801562000ec357602002820191906000526020600020905b81548152602001906001019080831162000eae575b5050505050925080600401805462000edb90620016d7565b80601f016020809104026020016040519081016040528092919081815260200182805462000f0990620016d7565b801562000f5a5780601f1062000f2e5761010080835404028352916020019162000f5a565b820191906000526020600020905b81548152906001019060200180831162000f3c57829003601f168201915b505050505091505091939590929450565b62000f768162000cc2565b6001600160a01b0381811660009081526020819052604090205416331462000d14576040517fd4ed9a170000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240162000432565b62000fe18162000cc2565b6001600160a01b0381811660009081526020819052604090208054909116331480159062001021575033600090815260068201602052604090205460ff16155b1562001065576040517f6e1f2bef0000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240162000432565b5050565b80156200117f576001600160a01b038216620010b1576040517fcfb6108a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216600090815260068401602052604090205460ff161562001113576040517f9fb0d64c0000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240162000432565b6001600160a01b0382166000908152600684016020526040902054610100900460ff16156200117a576040517f9d066d5a0000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240162000432565b505050565b6001600160a01b038216600090815260068401602052604090205460ff166200117a576040517fde0cce500000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240162000432565b60408051608080517f000000000000000000000000000000000000000000000000000000000000000060009081527f00000000000000000000000000000000000000000000000000000000000000006020527f0000000000000000000000000000000000000000000000000000000000000000855246606090815286845260a08220949095529384905290525b92915050565b611b8980620019af83390190565b828054828255906000526020600020908101928215620012c4579160200282015b82811115620012c4578251829060ff16905591602001919060010190620012a2565b50620012d2929150620012d6565b5090565b5b80821115620012d25760008155600101620012d7565b80356001600160a01b03811681146200130557600080fd5b919050565b6000602082840312156200131d57600080fd5b6200132882620012ed565b9392505050565b6000815180845260005b81811015620013575760208185018101518683018201520162001339565b506000602082860101526020601f19601f83011685010191505092915050565b8581526000602060a0818401526200139360a08401886200132f565b8381036040850152620013a781886200132f565b8481036060860152865180825283880192509083019060005b81811015620013de57835183529284019291840191600101620013c0565b50508481036080860152620013f481876200132f565b9a9950505050505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200142a57600080fd5b813567ffffffffffffffff8082111562001448576200144862001402565b604051601f8301601f19908116603f0116810190828211818310171562001473576200147362001402565b816040528381528660208588010111156200148d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a08688031215620014c657600080fd5b853567ffffffffffffffff80821115620014df57600080fd5b620014ed89838a0162001418565b965060208801359150808211156200150457600080fd5b6200151289838a0162001418565b955060408801359150808211156200152957600080fd5b50620015388882890162001418565b9350506200154960608701620012ed565b949793965091946080013592915050565b6000602082840312156200156d57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015620015b75783516001600160a01b03168352928401929184019160010162001590565b50909695505050505050565b60008060408385031215620015d757600080fd5b620015e283620012ed565b9150620015f260208401620012ed565b90509250929050565b6000806000606084860312156200161157600080fd5b6200161c84620012ed565b92506200162c60208501620012ed565b9150604084013580151581146200164257600080fd5b809150509250925092565b6000806000604084860312156200166357600080fd5b6200166e84620012ed565b9250602084013567ffffffffffffffff808211156200168c57600080fd5b818601915086601f830112620016a157600080fd5b813581811115620016b157600080fd5b876020828501011115620016c457600080fd5b6020830194508093505050509250925092565b600181811c90821680620016ec57607f821691505b6020821081036200170d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200117a57600081815260208120601f850160051c810160208610156200173c5750805b601f850160051c820191505b818110156200175d5782815560010162001748565b505050505050565b815167ffffffffffffffff81111562001782576200178262001402565b6200179a81620017938454620016d7565b8462001713565b602080601f831160018114620017d25760008415620017b95750858301515b600019600386901b1c1916600185901b1785556200175d565b600085815260208120601f198616915b828110156200180357888601518255948401946001909101908401620017e2565b5085821015620018225787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b038616815260a0602082015260006200185660a08301876200132f565b82810360408401526200186a81876200132f565b905082810360608401526200188081866200132f565b9150508260808301529695505050505050565b634e487b7160e01b600052603260045260246000fd5b818103818111156200126d57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b67ffffffffffffffff831115620018fc57620018fc62001402565b62001914836200190d8354620016d7565b8362001713565b6000601f8411600181146200194b5760008515620019325750838201355b600019600387901b1c1916600186901b17835562000cbb565b600083815260209020601f19861690835b828110156200197e57868501358255602094850194600190920191016200195c565b50868210156200199c5760001960f88860031b161c19848701351681555b505060018560011b018355505050505056fe600a61016052695369676e65645a6f6e6560b01b610180527f0aa333075d560d6d2e102e9d7afe8a8ba8b4a3ec41e19473caad880f9eb5fbe660a05260056101a052640312e302e360dc1b6101c0527f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c60c0526c08a92a06e626488dedac2d2dc5609b1b6102009081526b1cdd1c9a5b99c81b985b594b60a21b61020d526e1cdd1c9a5b99c81d995c9cda5bdb8b608a1b610219526f1d5a5b9d0c8d4d8818da185a5b92590b60821b610228527f6164647265737320766572696679696e67436f6e74726163740000000000000061023852602960f81b61025181905260526101e081905290912060e0526b0a6d2cedccac89ee4c8cae4560a31b610272908152711859191c995cdcc8199d5b199a5b1b195c8b60721b61027e52711d5a5b9d0d8d08195e1c1a5c985d1a5bdb8b60721b6102905271189e5d195ccccc881bdc99195c92185cda0b60721b6102a2526c189e5d195cc818dbdb9d195e1d609a1b6102b4526102c19190915260506102528190526102c260405290206101005246610120523480156101af57600080fd5b5060e05160a0805160c0516040805160009586526020939093529081524660609081523060809081529385209290915292909252339052610140526040517f98a7ac23945182ac62b68fbe5ba35cc0bf5c4c34b3a410ce94a4c2270282d6b590600090a160805160a05160c05160e05161010051610120516101405161190e61027b6000396000610f9801526000610edf01526000610e3e01526000610f0f01526000610f5901526000610f350152600081816102fd01528181610a7f015261108d015261190e6000f3fe6080604052600436106100655760003560e01c806369c56dc91161004357806369c56dc91461025c578063c3b1e7051461027f578063d61d79d21461029457610065565b80630be2ebbe146101d557806317b1f942146102005780632e778efc14610239575b60003660606001600160e01b03198335167ff460590b000000000000000000000000000000000000000000000000000000008190036100eb5760006100ad3660048184611251565b8101906100ba9190611290565b905060006100cb3660248184611251565b8101906100d891906112b4565b90506100e482826102a9565b50506101c8565b6001600160e01b031981167fa784b80c000000000000000000000000000000000000000000000000000000000361014b576101246102cc565b60405160200161013491906112d6565b6040516020818303038152906040529150506101ca565b6001600160e01b031981167f01ffc9a700000000000000000000000000000000000000000000000000000000036101c857600061018b3660048184611251565b8101906101989190611323565b90506101a381610379565b60408051911515602083015201604051602081830303815290604052925050506101ca565b505b915050805190602001f35b3480156101e157600080fd5b506101ea610416565b6040516101f7919061139d565b60405180910390f35b34801561020c57600080fd5b5061022061021b3660046113b0565b610485565b6040516001600160e01b031990911681526020016101f7565b34801561024557600080fd5b5061024e6106d5565b6040516101f79291906113ec565b34801561026857600080fd5b506102716107a6565b6040519081526020016101f7565b34801561028b57600080fd5b50610271610901565b3480156102a057600080fd5b506101ea6109bf565b6102b1610a7d565b806102c3576102bf82610ab6565b5050565b6102bf82610b0c565b6040517f66a2489f0000000000000000000000000000000000000000000000000000000081523060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906366a2489f90602401600060405180830381865afa15801561034c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037491908101906114db565b905090565b60006001600160e01b031982167f2e778efc0000000000000000000000000000000000000000000000000000000014806103dc57506001600160e01b031982167f39c677be00000000000000000000000000000000000000000000000000000000145b8061041057507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6040517f436f6e73696465726174696f6e2800000000000000000000000000000000000060208201527f52656365697665644974656d5b5d20636f6e73696465726174696f6e00000000602e820152602960f81b604a820152604b015b60405160208183030381529060405281565b600061048f610b5e565b36600061049f60a085018561157a565b90925090508335600080602460c435018035607e81146104cb5763d232fd2c600052846020526024601cfd5b50602081013560f81c80156104ec576364115774600052846020526024601cfd5b50607d81013560f81c801561050d576326787999600052846020526024601cfd5b506035013560c01c90504281101561053557631654607160005280602052826040526044601cfd5b602460a4350135915036600061054f605d601d888a611251565b909250905036600061056488605d818c611251565b91509150600061057388610b78565b905086156105995761059961059361058e60808f018f6115c8565b610bb2565b89610e05565b60006105a882888b8787610e3a565b905060006105f26105b7610edb565b7f1901000000000000000000000000000000000000000000000000000000000000600090815260029190915260228481526042822091905290565b905060006106368289898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fba92505050565b6001600160a01b03811660009081526020819052604090205490915060ff166106a1576040517f17c300890000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602481018c905260440160405180910390fd5b507f17b1f942000000000000000000000000000000000000000000000000000000009e9d5050505050505050505050505050565b604080516001808252818301909252606091829190816020015b6040805180820190915260008152606060208201528152602001906001900390816106ef57905050905060078160008151811061072e5761072e611611565b60209081029190910101515260008080808061074861104c565b945094509450945094508396508483838360405160200161076c9493929190611627565b6040516020818303038152906040528660008151811061078e5761078e611611565b60200260200101516020018190525050505050509091565b6040517f436f6e73696465726174696f6e2800000000000000000000000000000000000060208201527f52656365697665644974656d5b5d20636f6e73696465726174696f6e00000000602e820152602960f81b604a820152604b0160408051601f19818403018152908290526c0a4cac6cad2eccac892e8cada5609b1b60208301526e1d5a5b9d0e081a5d195b551e5c194b608a1b602d8301526d1859191c995cdcc81d1bdad95b8b60921b603c8301527f75696e74323536206964656e7469666965722c00000000000000000000000000604a8301526e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b605d8301527f6164647265737320726563697069656e74000000000000000000000000000000606c830152602960f81b607d83015290607e0160408051601f19818403018152908290526108e89291602001611695565b6040516020818303038152906040528051906020012081565b6040516c0a4cac6cad2eccac892e8cada5609b1b60208201526e1d5a5b9d0e081a5d195b551e5c194b608a1b602d8201526d1859191c995cdcc81d1bdad95b8b60921b603c8201527f75696e74323536206964656e7469666965722c00000000000000000000000000604a8201526e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b605d8201527f6164647265737320726563697069656e74000000000000000000000000000000606c820152602960f81b607d820152607e016108e8565b6040516c0a4cac6cad2eccac892e8cada5609b1b60208201526e1d5a5b9d0e081a5d195b551e5c194b608a1b602d8201526d1859191c995cdcc81d1bdad95b8b60921b603c8201527f75696e74323536206964656e7469666965722c00000000000000000000000000604a8201526e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b605d8201527f6164647265737320726563697069656e74000000000000000000000000000000606c820152602960f81b607d820152607e01610473565b7f0000000000000000000000000000000000000000000000000000000000000000338114610ab357636d5769be6000526004601cfd5b50565b6001600160a01b03811660008181526020818152604091829020805460ff1916905590519182527f3525e22824a8a7df2c9a6029941c824cf95b6447f1e13d5128fd3826d35afe8b91015b60405180910390a150565b6001600160a01b03811660008181526020818152604091829020805460ff1916600117905590519182527f47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f249101610b01565b602060043514610b76576346d5d8956000526004601cfd5b565b604560c435013560601c604435811515828214151615610bac57631bcf9bb76000528160205280604052826060526064601cfd5b50919050565b600081818167ffffffffffffffff811115610bcf57610bcf611470565b604051908082528060200260200182016040528015610bf8578160200160208202803683370190505b50905060005b82811015610c4b57610c26868683818110610c1b57610c1b611611565b905060a00201611114565b828281518110610c3857610c38611611565b6020908102919091010152600101610bfe565b506040517f436f6e73696465726174696f6e2800000000000000000000000000000000000060208201527f52656365697665644974656d5b5d20636f6e73696465726174696f6e00000000602e820152602960f81b604a820152604b0160408051601f19818403018152908290526c0a4cac6cad2eccac892e8cada5609b1b60208301526e1d5a5b9d0e081a5d195b551e5c194b608a1b602d8301526d1859191c995cdcc81d1bdad95b8b60921b603c8301527f75696e74323536206964656e7469666965722c00000000000000000000000000604a8301526e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b605d8301527f6164647265737320726563697069656e74000000000000000000000000000000606c830152602960f81b607d83015290607e0160408051601f1981840301815290829052610d8e9291602001611695565b6040516020818303038152906040528051906020012081604051602001610db591906116c4565b60405160208183030381529060405280519060200120604051602001610de5929190918252602082015260400190565b604051602081830303815290604052805190602001209250505092915050565b60a260c4350135608460a4350135838214610e34576359cb96d16000528160205280604052826060526064601cfd5b50505050565b60007f00000000000000000000000000000000000000000000000000000000000000008686868686604051610e709291906116fa565b604051908190038120610eba95949392916020019485526001600160a01b0393909316602085015267ffffffffffffffff9190911660408401526060830152608082015260a00190565b60405160208183030381529060405280519060200120905095945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614610f95575060408051608080517f000000000000000000000000000000000000000000000000000000000000000060009081527f00000000000000000000000000000000000000000000000000000000000000006020527f0000000000000000000000000000000000000000000000000000000000000000855246606090815230845260a08220949095529093529190915290565b507f000000000000000000000000000000000000000000000000000000000000000090565b600080600052600082516020840380518260410360018111611040576040870151606088015160001a9550811561101d57601b8160ff1c0195507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811660408901525b8588528884526020600060808660015afa50828452848852604088015260005195505b50905250909392505050565b600060608060608061105c610edb565b6040517f04789c980000000000000000000000000000000000000000000000000000000081523060048201529095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906304789c9890602401600060405180830381865afa1580156110dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111049190810190611776565b9899929891975095509350915050565b6040516c0a4cac6cad2eccac892e8cada5609b1b60208201526e1d5a5b9d0e081a5d195b551e5c194b608a1b602d8201526d1859191c995cdcc81d1bdad95b8b60921b603c8201527f75696e74323536206964656e7469666965722c00000000000000000000000000604a8201526e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b605d8201527f6164647265737320726563697069656e74000000000000000000000000000000606c820152602960f81b607d820152600090607e0160408051601f198184030181529190528051602091820120906111f590840184611885565b6112056040850160208601611290565b6040850135606086013561121f60a0880160808901611290565b604051602001611234969594939291906118a6565b604051602081830303815290604052805190602001209050919050565b6000808585111561126157600080fd5b8386111561126e57600080fd5b5050820193919092039150565b6001600160a01b0381168114610ab357600080fd5b6000602082840312156112a257600080fd5b81356112ad8161127b565b9392505050565b6000602082840312156112c657600080fd5b813580151581146112ad57600080fd5b6020808252825182820181905260009190848201906040850190845b818110156113175783516001600160a01b0316835292840192918401916001016112f2565b50909695505050505050565b60006020828403121561133557600080fd5b81356001600160e01b0319811681146112ad57600080fd5b60005b83811015611368578181015183820152602001611350565b50506000910152565b6000815180845261138981602086016020860161134d565b601f01601f19169290920160200192915050565b6020815260006112ad6020830184611371565b6000602082840312156113c257600080fd5b813567ffffffffffffffff8111156113d957600080fd5b820161014081850312156112ad57600080fd5b600060408083526113ff81840186611371565b6020848203818601528186518084528284019150828160051b85010183890160005b8381101561146057868303601f1901855281518051845286015186840189905261144d89850182611371565b9587019593505090850190600101611421565b50909a9950505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156114af576114af611470565b604052919050565b600067ffffffffffffffff8211156114d1576114d1611470565b5060051b60200190565b600060208083850312156114ee57600080fd5b825167ffffffffffffffff81111561150557600080fd5b8301601f8101851361151657600080fd5b8051611529611524826114b7565b611486565b81815260059190911b8201830190838101908783111561154857600080fd5b928401925b8284101561156f5783516115608161127b565b8252928401929084019061154d565b979650505050505050565b6000808335601e1984360301811261159157600080fd5b83018035915067ffffffffffffffff8211156115ac57600080fd5b6020019150368190038213156115c157600080fd5b9250929050565b6000808335601e198436030181126115df57600080fd5b83018035915067ffffffffffffffff8211156115fa57600080fd5b602001915060a0810236038213156115c157600080fd5b634e487b7160e01b600052603260045260246000fd5b848152600060206080818401526116416080840187611371565b838103604085015285518082528287019183019060005b8181101561167457835183529284019291840191600101611658565b505084810360608601526116888187611371565b9998505050505050505050565b600083516116a781846020880161134d565b8351908301906116bb81836020880161134d565b01949350505050565b815160009082906020808601845b838110156116ee578151855293820193908201906001016116d2565b50929695505050505050565b8183823760009101908152919050565b600082601f83011261171b57600080fd5b815167ffffffffffffffff81111561173557611735611470565b6117486020601f19601f84011601611486565b81815284602083860101111561175d57600080fd5b61176e82602083016020870161134d565b949350505050565b600080600080600060a0868803121561178e57600080fd5b8551945060208087015167ffffffffffffffff808211156117ae57600080fd5b6117ba8a838b0161170a565b965060408901519150808211156117d057600080fd5b6117dc8a838b0161170a565b955060608901519150808211156117f257600080fd5b818901915089601f83011261180657600080fd5b8151611814611524826114b7565b81815260059190911b8301840190848101908c83111561183357600080fd5b938501935b8285101561185157845182529385019390850190611838565b60808c0151909750945050508083111561186a57600080fd5b50506118788882890161170a565b9150509295509295909350565b60006020828403121561189757600080fd5b8135600681106112ad57600080fd5b86815260c08101600687106118cb57634e487b7160e01b600052602160045260246000fd5b8660208301526001600160a01b03808716604084015285606084015284608084015280841660a08401525097965050505050505056fea164736f6c6343000811000aa164736f6c6343000811000a600a61016052695369676e65645a6f6e6560b01b610180527f0aa333075d560d6d2e102e9d7afe8a8ba8b4a3ec41e19473caad880f9eb5fbe660a05260056101a052640312e302e360dc1b6101c0527f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c60c0526c08a92a06e626488dedac2d2dc5609b1b6102009081526b1cdd1c9a5b99c81b985b594b60a21b61020d526e1cdd1c9a5b99c81d995c9cda5bdb8b608a1b610219526f1d5a5b9d0c8d4d8818da185a5b92590b60821b610228527f6164647265737320766572696679696e67436f6e74726163740000000000000061023852602960f81b61025181905260526101e081905290912060e0526b0a6d2cedccac89ee4c8cae4560a31b610272908152711859191c995cdcc8199d5b199a5b1b195c8b60721b61027e52711d5a5b9d0d8d08195e1c1a5c985d1a5bdb8b60721b6102905271189e5d195ccccc881bdc99195c92185cda0b60721b6102a2526c189e5d195cc818dbdb9d195e1d609a1b6102b4526102c19190915260506102528190526102c260405290206101005246610120523480156101af57600080fd5b5060e05160a0805160c0516040805160009586526020939093529081524660609081523060809081529385209290915292909252339052610140526040517f98a7ac23945182ac62b68fbe5ba35cc0bf5c4c34b3a410ce94a4c2270282d6b590600090a160805160a05160c05160e05161010051610120516101405161190e61027b6000396000610f9801526000610edf01526000610e3e01526000610f0f01526000610f5901526000610f350152600081816102fd01528181610a7f015261108d015261190e6000f3fe6080604052600436106100655760003560e01c806369c56dc91161004357806369c56dc91461025c578063c3b1e7051461027f578063d61d79d21461029457610065565b80630be2ebbe146101d557806317b1f942146102005780632e778efc14610239575b60003660606001600160e01b03198335167ff460590b000000000000000000000000000000000000000000000000000000008190036100eb5760006100ad3660048184611251565b8101906100ba9190611290565b905060006100cb3660248184611251565b8101906100d891906112b4565b90506100e482826102a9565b50506101c8565b6001600160e01b031981167fa784b80c000000000000000000000000000000000000000000000000000000000361014b576101246102cc565b60405160200161013491906112d6565b6040516020818303038152906040529150506101ca565b6001600160e01b031981167f01ffc9a700000000000000000000000000000000000000000000000000000000036101c857600061018b3660048184611251565b8101906101989190611323565b90506101a381610379565b60408051911515602083015201604051602081830303815290604052925050506101ca565b505b915050805190602001f35b3480156101e157600080fd5b506101ea610416565b6040516101f7919061139d565b60405180910390f35b34801561020c57600080fd5b5061022061021b3660046113b0565b610485565b6040516001600160e01b031990911681526020016101f7565b34801561024557600080fd5b5061024e6106d5565b6040516101f79291906113ec565b34801561026857600080fd5b506102716107a6565b6040519081526020016101f7565b34801561028b57600080fd5b50610271610901565b3480156102a057600080fd5b506101ea6109bf565b6102b1610a7d565b806102c3576102bf82610ab6565b5050565b6102bf82610b0c565b6040517f66a2489f0000000000000000000000000000000000000000000000000000000081523060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906366a2489f90602401600060405180830381865afa15801561034c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037491908101906114db565b905090565b60006001600160e01b031982167f2e778efc0000000000000000000000000000000000000000000000000000000014806103dc57506001600160e01b031982167f39c677be00000000000000000000000000000000000000000000000000000000145b8061041057507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6040517f436f6e73696465726174696f6e2800000000000000000000000000000000000060208201527f52656365697665644974656d5b5d20636f6e73696465726174696f6e00000000602e820152602960f81b604a820152604b015b60405160208183030381529060405281565b600061048f610b5e565b36600061049f60a085018561157a565b90925090508335600080602460c435018035607e81146104cb5763d232fd2c600052846020526024601cfd5b50602081013560f81c80156104ec576364115774600052846020526024601cfd5b50607d81013560f81c801561050d576326787999600052846020526024601cfd5b506035013560c01c90504281101561053557631654607160005280602052826040526044601cfd5b602460a4350135915036600061054f605d601d888a611251565b909250905036600061056488605d818c611251565b91509150600061057388610b78565b905086156105995761059961059361058e60808f018f6115c8565b610bb2565b89610e05565b60006105a882888b8787610e3a565b905060006105f26105b7610edb565b7f1901000000000000000000000000000000000000000000000000000000000000600090815260029190915260228481526042822091905290565b905060006106368289898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fba92505050565b6001600160a01b03811660009081526020819052604090205490915060ff166106a1576040517f17c300890000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602481018c905260440160405180910390fd5b507f17b1f942000000000000000000000000000000000000000000000000000000009e9d5050505050505050505050505050565b604080516001808252818301909252606091829190816020015b6040805180820190915260008152606060208201528152602001906001900390816106ef57905050905060078160008151811061072e5761072e611611565b60209081029190910101515260008080808061074861104c565b945094509450945094508396508483838360405160200161076c9493929190611627565b6040516020818303038152906040528660008151811061078e5761078e611611565b60200260200101516020018190525050505050509091565b6040517f436f6e73696465726174696f6e2800000000000000000000000000000000000060208201527f52656365697665644974656d5b5d20636f6e73696465726174696f6e00000000602e820152602960f81b604a820152604b0160408051601f19818403018152908290526c0a4cac6cad2eccac892e8cada5609b1b60208301526e1d5a5b9d0e081a5d195b551e5c194b608a1b602d8301526d1859191c995cdcc81d1bdad95b8b60921b603c8301527f75696e74323536206964656e7469666965722c00000000000000000000000000604a8301526e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b605d8301527f6164647265737320726563697069656e74000000000000000000000000000000606c830152602960f81b607d83015290607e0160408051601f19818403018152908290526108e89291602001611695565b6040516020818303038152906040528051906020012081565b6040516c0a4cac6cad2eccac892e8cada5609b1b60208201526e1d5a5b9d0e081a5d195b551e5c194b608a1b602d8201526d1859191c995cdcc81d1bdad95b8b60921b603c8201527f75696e74323536206964656e7469666965722c00000000000000000000000000604a8201526e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b605d8201527f6164647265737320726563697069656e74000000000000000000000000000000606c820152602960f81b607d820152607e016108e8565b6040516c0a4cac6cad2eccac892e8cada5609b1b60208201526e1d5a5b9d0e081a5d195b551e5c194b608a1b602d8201526d1859191c995cdcc81d1bdad95b8b60921b603c8201527f75696e74323536206964656e7469666965722c00000000000000000000000000604a8201526e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b605d8201527f6164647265737320726563697069656e74000000000000000000000000000000606c820152602960f81b607d820152607e01610473565b7f0000000000000000000000000000000000000000000000000000000000000000338114610ab357636d5769be6000526004601cfd5b50565b6001600160a01b03811660008181526020818152604091829020805460ff1916905590519182527f3525e22824a8a7df2c9a6029941c824cf95b6447f1e13d5128fd3826d35afe8b91015b60405180910390a150565b6001600160a01b03811660008181526020818152604091829020805460ff1916600117905590519182527f47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f249101610b01565b602060043514610b76576346d5d8956000526004601cfd5b565b604560c435013560601c604435811515828214151615610bac57631bcf9bb76000528160205280604052826060526064601cfd5b50919050565b600081818167ffffffffffffffff811115610bcf57610bcf611470565b604051908082528060200260200182016040528015610bf8578160200160208202803683370190505b50905060005b82811015610c4b57610c26868683818110610c1b57610c1b611611565b905060a00201611114565b828281518110610c3857610c38611611565b6020908102919091010152600101610bfe565b506040517f436f6e73696465726174696f6e2800000000000000000000000000000000000060208201527f52656365697665644974656d5b5d20636f6e73696465726174696f6e00000000602e820152602960f81b604a820152604b0160408051601f19818403018152908290526c0a4cac6cad2eccac892e8cada5609b1b60208301526e1d5a5b9d0e081a5d195b551e5c194b608a1b602d8301526d1859191c995cdcc81d1bdad95b8b60921b603c8301527f75696e74323536206964656e7469666965722c00000000000000000000000000604a8301526e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b605d8301527f6164647265737320726563697069656e74000000000000000000000000000000606c830152602960f81b607d83015290607e0160408051601f1981840301815290829052610d8e9291602001611695565b6040516020818303038152906040528051906020012081604051602001610db591906116c4565b60405160208183030381529060405280519060200120604051602001610de5929190918252602082015260400190565b604051602081830303815290604052805190602001209250505092915050565b60a260c4350135608460a4350135838214610e34576359cb96d16000528160205280604052826060526064601cfd5b50505050565b60007f00000000000000000000000000000000000000000000000000000000000000008686868686604051610e709291906116fa565b604051908190038120610eba95949392916020019485526001600160a01b0393909316602085015267ffffffffffffffff9190911660408401526060830152608082015260a00190565b60405160208183030381529060405280519060200120905095945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614610f95575060408051608080517f000000000000000000000000000000000000000000000000000000000000000060009081527f00000000000000000000000000000000000000000000000000000000000000006020527f0000000000000000000000000000000000000000000000000000000000000000855246606090815230845260a08220949095529093529190915290565b507f000000000000000000000000000000000000000000000000000000000000000090565b600080600052600082516020840380518260410360018111611040576040870151606088015160001a9550811561101d57601b8160ff1c0195507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811660408901525b8588528884526020600060808660015afa50828452848852604088015260005195505b50905250909392505050565b600060608060608061105c610edb565b6040517f04789c980000000000000000000000000000000000000000000000000000000081523060048201529095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906304789c9890602401600060405180830381865afa1580156110dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111049190810190611776565b9899929891975095509350915050565b6040516c0a4cac6cad2eccac892e8cada5609b1b60208201526e1d5a5b9d0e081a5d195b551e5c194b608a1b602d8201526d1859191c995cdcc81d1bdad95b8b60921b603c8201527f75696e74323536206964656e7469666965722c00000000000000000000000000604a8201526e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b605d8201527f6164647265737320726563697069656e74000000000000000000000000000000606c820152602960f81b607d820152600090607e0160408051601f198184030181529190528051602091820120906111f590840184611885565b6112056040850160208601611290565b6040850135606086013561121f60a0880160808901611290565b604051602001611234969594939291906118a6565b604051602081830303815290604052805190602001209050919050565b6000808585111561126157600080fd5b8386111561126e57600080fd5b5050820193919092039150565b6001600160a01b0381168114610ab357600080fd5b6000602082840312156112a257600080fd5b81356112ad8161127b565b9392505050565b6000602082840312156112c657600080fd5b813580151581146112ad57600080fd5b6020808252825182820181905260009190848201906040850190845b818110156113175783516001600160a01b0316835292840192918401916001016112f2565b50909695505050505050565b60006020828403121561133557600080fd5b81356001600160e01b0319811681146112ad57600080fd5b60005b83811015611368578181015183820152602001611350565b50506000910152565b6000815180845261138981602086016020860161134d565b601f01601f19169290920160200192915050565b6020815260006112ad6020830184611371565b6000602082840312156113c257600080fd5b813567ffffffffffffffff8111156113d957600080fd5b820161014081850312156112ad57600080fd5b600060408083526113ff81840186611371565b6020848203818601528186518084528284019150828160051b85010183890160005b8381101561146057868303601f1901855281518051845286015186840189905261144d89850182611371565b9587019593505090850190600101611421565b50909a9950505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156114af576114af611470565b604052919050565b600067ffffffffffffffff8211156114d1576114d1611470565b5060051b60200190565b600060208083850312156114ee57600080fd5b825167ffffffffffffffff81111561150557600080fd5b8301601f8101851361151657600080fd5b8051611529611524826114b7565b611486565b81815260059190911b8201830190838101908783111561154857600080fd5b928401925b8284101561156f5783516115608161127b565b8252928401929084019061154d565b979650505050505050565b6000808335601e1984360301811261159157600080fd5b83018035915067ffffffffffffffff8211156115ac57600080fd5b6020019150368190038213156115c157600080fd5b9250929050565b6000808335601e198436030181126115df57600080fd5b83018035915067ffffffffffffffff8211156115fa57600080fd5b602001915060a0810236038213156115c157600080fd5b634e487b7160e01b600052603260045260246000fd5b848152600060206080818401526116416080840187611371565b838103604085015285518082528287019183019060005b8181101561167457835183529284019291840191600101611658565b505084810360608601526116888187611371565b9998505050505050505050565b600083516116a781846020880161134d565b8351908301906116bb81836020880161134d565b01949350505050565b815160009082906020808601845b838110156116ee578151855293820193908201906001016116d2565b50929695505050505050565b8183823760009101908152919050565b600082601f83011261171b57600080fd5b815167ffffffffffffffff81111561173557611735611470565b6117486020601f19601f84011601611486565b81815284602083860101111561175d57600080fd5b61176e82602083016020870161134d565b949350505050565b600080600080600060a0868803121561178e57600080fd5b8551945060208087015167ffffffffffffffff808211156117ae57600080fd5b6117ba8a838b0161170a565b965060408901519150808211156117d057600080fd5b6117dc8a838b0161170a565b955060608901519150808211156117f257600080fd5b818901915089601f83011261180657600080fd5b8151611814611524826114b7565b81815260059190911b8301840190848101908c83111561183357600080fd5b938501935b8285101561185157845182529385019390850190611838565b60808c0151909750945050508083111561186a57600080fd5b50506118788882890161170a565b9150509295509295909350565b60006020828403121561189757600080fd5b8135600681106112ad57600080fd5b86815260c08101600687106118cb57634e487b7160e01b600052602160045260246000fd5b8660208301526001600160a01b03808716604084015285606084015284608084015280841660a08401525097965050505050505056fea164736f6c6343000811000a",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000d95760003560e01c806366a2489f116200008b578063906c87cc1162000062578063906c87cc1462000268578063dca09383146200027f578063e89fad58146200029657600080fd5b806366a2489f14620002145780636d435421146200023a5780637b37e561146200025157600080fd5b806314afd79e11620000c057806314afd79e14620001415780634b42e8d5146200015857806351710e4514620001fb57600080fd5b806304789c9814620000de5780630eb925161462000111575b600080fd5b620000f5620000ef3660046200130a565b620002ad565b6040516200010895949392919062001377565b60405180910390f35b6200012862000122366004620014ad565b620002dd565b6040516001600160a01b03909116815260200162000108565b62000128620001523660046200130a565b62000582565b62000128620001693660046200155a565b6040517fff0000000000000000000000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff193060601b166021820152603581018290527f0000000000000000000000000000000000000000000000000000000000000000605582015260009060750160408051601f19818403018152919052805160209091012092915050565b620002126200020c3660046200130a565b620005ae565b005b6200022b620002253660046200130a565b620006e4565b60405162000108919062001574565b620002126200024b366004620015c3565b6200076e565b62000212620002623660046200130a565b620008a6565b62000128620002793660046200130a565b62000974565b6200021262000290366004620015fb565b620009a3565b62000212620002a73660046200164d565b62000c87565b6000606080606080620002c08662000cc2565b620002cb8662000d17565b939a9299509097509550909350915050565b60006001600160a01b03831662000320576040517f99faaa0400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606082901c33146200035e576040517fcb6e534400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fff0000000000000000000000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff193060601b166021820152603581018390527f0000000000000000000000000000000000000000000000000000000000000000605582015260750160408051601f19818403018152919052805160209091012090506001600160a01b0381163b156200043b576040517e8343850000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024015b60405180910390fd5b816040516200044a9062001273565b8190604051809103906000f59050801580156200046b573d6000803e3d6000fd5b50506001600160a01b038181166000908152602081905260409020805473ffffffffffffffffffffffffffffffffffffffff191691851691909117815560028101620004b8888262001765565b5060038101620004c9878262001765565b5060048101620004da868262001765565b50604080516020810190915260038152620004fc906005830190600162001281565b507f106160dca18b77e6926325d074dd8328fbec25f496d6fd313ef44f3e581e2afe82888888876040516200053695949392919062001832565b60405180910390a16040516001600160a01b03808616916000918516907fc8894f26f396ce8c004245c8b7cd1b92103a6e4302fcbab883987149ac01b7ec908390a45095945050505050565b60006200058f8262000cc2565b506001600160a01b039081166000908152602081905260409020541690565b620005b98162000cc2565b6001600160a01b038181166000908152602081905260409020600101541633146200061c576040517f88c3a1150000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240162000432565b6040516000907f11a3cf439fb225bfe74225716b6774765670ec1060e3796802e62139d69974da908290a26001600160a01b0380821660008181526020819052604080822060018101805473ffffffffffffffffffffffffffffffffffffffff1916905554905133949190911692917fc8894f26f396ce8c004245c8b7cd1b92103a6e4302fcbab883987149ac01b7ec91a46001600160a01b03166000908152602081905260409020805473ffffffffffffffffffffffffffffffffffffffff191633179055565b6060620006f18262000cc2565b6001600160a01b038216600090815260208181526040918290206007810180548451818502810185019095528085529193929091908301828280156200076157602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000742575b5050505050915050919050565b620007798262000f6b565b6001600160a01b038116620007c6576040517fa388d2630000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240162000432565b6001600160a01b0380831660009081526020819052604090206001015481169082160362000834576040517fcbc080ca0000000000000000000000000000000000000000000000000000000081526001600160a01b0380841660048301528216602482015260440162000432565b6040516001600160a01b038216907f11a3cf439fb225bfe74225716b6774765670ec1060e3796802e62139d69974da90600090a26001600160a01b039182166000908152602081905260409020600101805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b620008b18162000f6b565b6001600160a01b038181166000908152602081905260409020600101541662000912576040517f6b0136160000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240162000432565b6040516000907f11a3cf439fb225bfe74225716b6774765670ec1060e3796802e62139d69974da908290a26001600160a01b03166000908152602081905260409020600101805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000620009818262000cc2565b506001600160a01b039081166000908152602081905260409020600101541690565b620009ae8362000fd6565b6001600160a01b0383166000908152602081905260409020620009d381848462001069565b6040517ff460590b0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152831515602483015285169063f460590b90604401600060405180830381600087803b15801562000a3857600080fd5b505af115801562000a4d573d6000803e3d6000fd5b505050506001600160a01b0383166000908152600682016020526040902080546101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000909116841580157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16919091179190911790915562000b0d576007810180546001810182556000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03851617905562000c36565b60005b600782015481101562000c3457836001600160a01b031682600701828154811062000b3f5762000b3f62001893565b6000918252602090912001546001600160a01b03160362000c2b5760078201805462000b6e90600190620018a9565b8154811062000b815762000b8162001893565b6000918252602090912001546007830180546001600160a01b03909216918390811062000bb25762000bb262001893565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160070180548062000bf65762000bf6620018cb565b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff1916905501905562000c34565b60010162000b10565b505b604080516001600160a01b038681168252851660208201528315158183015290517fb658b57f3a8d73a4f3bb96789edcebed831f44d5cc4a513d4416c6bb25ea0e8b9181900360600190a150505050565b62000c928362000fd6565b6001600160a01b03831660009081526020819052604090206003810162000cbb838583620018e1565b5050505050565b6001600160a01b038181166000908152602081905260409020541662000d14576040517fb1a69e4800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6001600160a01b038116600090815260208190526040812060609081908190819062000d4387620011e0565b955080600201805462000d5690620016d7565b80601f016020809104026020016040519081016040528092919081815260200182805462000d8490620016d7565b801562000dd55780601f1062000da95761010080835404028352916020019162000dd5565b820191906000526020600020905b81548152906001019060200180831162000db757829003601f168201915b5050505050945080600301805462000ded90620016d7565b80601f016020809104026020016040519081016040528092919081815260200182805462000e1b90620016d7565b801562000e6c5780601f1062000e405761010080835404028352916020019162000e6c565b820191906000526020600020905b81548152906001019060200180831162000e4e57829003601f168201915b505050505093508060050180548060200260200160405190810160405280929190818152602001828054801562000ec357602002820191906000526020600020905b81548152602001906001019080831162000eae575b5050505050925080600401805462000edb90620016d7565b80601f016020809104026020016040519081016040528092919081815260200182805462000f0990620016d7565b801562000f5a5780601f1062000f2e5761010080835404028352916020019162000f5a565b820191906000526020600020905b81548152906001019060200180831162000f3c57829003601f168201915b505050505091505091939590929450565b62000f768162000cc2565b6001600160a01b0381811660009081526020819052604090205416331462000d14576040517fd4ed9a170000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240162000432565b62000fe18162000cc2565b6001600160a01b0381811660009081526020819052604090208054909116331480159062001021575033600090815260068201602052604090205460ff16155b1562001065576040517f6e1f2bef0000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240162000432565b5050565b80156200117f576001600160a01b038216620010b1576040517fcfb6108a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216600090815260068401602052604090205460ff161562001113576040517f9fb0d64c0000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240162000432565b6001600160a01b0382166000908152600684016020526040902054610100900460ff16156200117a576040517f9d066d5a0000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240162000432565b505050565b6001600160a01b038216600090815260068401602052604090205460ff166200117a576040517fde0cce500000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240162000432565b60408051608080517f000000000000000000000000000000000000000000000000000000000000000060009081527f00000000000000000000000000000000000000000000000000000000000000006020527f0000000000000000000000000000000000000000000000000000000000000000855246606090815286845260a08220949095529384905290525b92915050565b611b8980620019af83390190565b828054828255906000526020600020908101928215620012c4579160200282015b82811115620012c4578251829060ff16905591602001919060010190620012a2565b50620012d2929150620012d6565b5090565b5b80821115620012d25760008155600101620012d7565b80356001600160a01b03811681146200130557600080fd5b919050565b6000602082840312156200131d57600080fd5b6200132882620012ed565b9392505050565b6000815180845260005b81811015620013575760208185018101518683018201520162001339565b506000602082860101526020601f19601f83011685010191505092915050565b8581526000602060a0818401526200139360a08401886200132f565b8381036040850152620013a781886200132f565b8481036060860152865180825283880192509083019060005b81811015620013de57835183529284019291840191600101620013c0565b50508481036080860152620013f481876200132f565b9a9950505050505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200142a57600080fd5b813567ffffffffffffffff8082111562001448576200144862001402565b604051601f8301601f19908116603f0116810190828211818310171562001473576200147362001402565b816040528381528660208588010111156200148d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a08688031215620014c657600080fd5b853567ffffffffffffffff80821115620014df57600080fd5b620014ed89838a0162001418565b965060208801359150808211156200150457600080fd5b6200151289838a0162001418565b955060408801359150808211156200152957600080fd5b50620015388882890162001418565b9350506200154960608701620012ed565b949793965091946080013592915050565b6000602082840312156200156d57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015620015b75783516001600160a01b03168352928401929184019160010162001590565b50909695505050505050565b60008060408385031215620015d757600080fd5b620015e283620012ed565b9150620015f260208401620012ed565b90509250929050565b6000806000606084860312156200161157600080fd5b6200161c84620012ed565b92506200162c60208501620012ed565b9150604084013580151581146200164257600080fd5b809150509250925092565b6000806000604084860312156200166357600080fd5b6200166e84620012ed565b9250602084013567ffffffffffffffff808211156200168c57600080fd5b818601915086601f830112620016a157600080fd5b813581811115620016b157600080fd5b876020828501011115620016c457600080fd5b6020830194508093505050509250925092565b600181811c90821680620016ec57607f821691505b6020821081036200170d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200117a57600081815260208120601f850160051c810160208610156200173c5750805b601f850160051c820191505b818110156200175d5782815560010162001748565b505050505050565b815167ffffffffffffffff81111562001782576200178262001402565b6200179a81620017938454620016d7565b8462001713565b602080601f831160018114620017d25760008415620017b95750858301515b600019600386901b1c1916600185901b1785556200175d565b600085815260208120601f198616915b828110156200180357888601518255948401946001909101908401620017e2565b5085821015620018225787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b038616815260a0602082015260006200185660a08301876200132f565b82810360408401526200186a81876200132f565b905082810360608401526200188081866200132f565b9150508260808301529695505050505050565b634e487b7160e01b600052603260045260246000fd5b818103818111156200126d57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b67ffffffffffffffff831115620018fc57620018fc62001402565b62001914836200190d8354620016d7565b8362001713565b6000601f8411600181146200194b5760008515620019325750838201355b600019600387901b1c1916600186901b17835562000cbb565b600083815260209020601f19861690835b828110156200197e57868501358255602094850194600190920191016200195c565b50868210156200199c5760001960f88860031b161c19848701351681555b505060018560011b018355505050505056fe600a61016052695369676e65645a6f6e6560b01b610180527f0aa333075d560d6d2e102e9d7afe8a8ba8b4a3ec41e19473caad880f9eb5fbe660a05260056101a052640312e302e360dc1b6101c0527f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c60c0526c08a92a06e626488dedac2d2dc5609b1b6102009081526b1cdd1c9a5b99c81b985b594b60a21b61020d526e1cdd1c9a5b99c81d995c9cda5bdb8b608a1b610219526f1d5a5b9d0c8d4d8818da185a5b92590b60821b610228527f6164647265737320766572696679696e67436f6e74726163740000000000000061023852602960f81b61025181905260526101e081905290912060e0526b0a6d2cedccac89ee4c8cae4560a31b610272908152711859191c995cdcc8199d5b199a5b1b195c8b60721b61027e52711d5a5b9d0d8d08195e1c1a5c985d1a5bdb8b60721b6102905271189e5d195ccccc881bdc99195c92185cda0b60721b6102a2526c189e5d195cc818dbdb9d195e1d609a1b6102b4526102c19190915260506102528190526102c260405290206101005246610120523480156101af57600080fd5b5060e05160a0805160c0516040805160009586526020939093529081524660609081523060809081529385209290915292909252339052610140526040517f98a7ac23945182ac62b68fbe5ba35cc0bf5c4c34b3a410ce94a4c2270282d6b590600090a160805160a05160c05160e05161010051610120516101405161190e61027b6000396000610f9801526000610edf01526000610e3e01526000610f0f01526000610f5901526000610f350152600081816102fd01528181610a7f015261108d015261190e6000f3fe6080604052600436106100655760003560e01c806369c56dc91161004357806369c56dc91461025c578063c3b1e7051461027f578063d61d79d21461029457610065565b80630be2ebbe146101d557806317b1f942146102005780632e778efc14610239575b60003660606001600160e01b03198335167ff460590b000000000000000000000000000000000000000000000000000000008190036100eb5760006100ad3660048184611251565b8101906100ba9190611290565b905060006100cb3660248184611251565b8101906100d891906112b4565b90506100e482826102a9565b50506101c8565b6001600160e01b031981167fa784b80c000000000000000000000000000000000000000000000000000000000361014b576101246102cc565b60405160200161013491906112d6565b6040516020818303038152906040529150506101ca565b6001600160e01b031981167f01ffc9a700000000000000000000000000000000000000000000000000000000036101c857600061018b3660048184611251565b8101906101989190611323565b90506101a381610379565b60408051911515602083015201604051602081830303815290604052925050506101ca565b505b915050805190602001f35b3480156101e157600080fd5b506101ea610416565b6040516101f7919061139d565b60405180910390f35b34801561020c57600080fd5b5061022061021b3660046113b0565b610485565b6040516001600160e01b031990911681526020016101f7565b34801561024557600080fd5b5061024e6106d5565b6040516101f79291906113ec565b34801561026857600080fd5b506102716107a6565b6040519081526020016101f7565b34801561028b57600080fd5b50610271610901565b3480156102a057600080fd5b506101ea6109bf565b6102b1610a7d565b806102c3576102bf82610ab6565b5050565b6102bf82610b0c565b6040517f66a2489f0000000000000000000000000000000000000000000000000000000081523060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906366a2489f90602401600060405180830381865afa15801561034c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037491908101906114db565b905090565b60006001600160e01b031982167f2e778efc0000000000000000000000000000000000000000000000000000000014806103dc57506001600160e01b031982167f39c677be00000000000000000000000000000000000000000000000000000000145b8061041057507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6040517f436f6e73696465726174696f6e2800000000000000000000000000000000000060208201527f52656365697665644974656d5b5d20636f6e73696465726174696f6e00000000602e820152602960f81b604a820152604b015b60405160208183030381529060405281565b600061048f610b5e565b36600061049f60a085018561157a565b90925090508335600080602460c435018035607e81146104cb5763d232fd2c600052846020526024601cfd5b50602081013560f81c80156104ec576364115774600052846020526024601cfd5b50607d81013560f81c801561050d576326787999600052846020526024601cfd5b506035013560c01c90504281101561053557631654607160005280602052826040526044601cfd5b602460a4350135915036600061054f605d601d888a611251565b909250905036600061056488605d818c611251565b91509150600061057388610b78565b905086156105995761059961059361058e60808f018f6115c8565b610bb2565b89610e05565b60006105a882888b8787610e3a565b905060006105f26105b7610edb565b7f1901000000000000000000000000000000000000000000000000000000000000600090815260029190915260228481526042822091905290565b905060006106368289898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fba92505050565b6001600160a01b03811660009081526020819052604090205490915060ff166106a1576040517f17c300890000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602481018c905260440160405180910390fd5b507f17b1f942000000000000000000000000000000000000000000000000000000009e9d5050505050505050505050505050565b604080516001808252818301909252606091829190816020015b6040805180820190915260008152606060208201528152602001906001900390816106ef57905050905060078160008151811061072e5761072e611611565b60209081029190910101515260008080808061074861104c565b945094509450945094508396508483838360405160200161076c9493929190611627565b6040516020818303038152906040528660008151811061078e5761078e611611565b60200260200101516020018190525050505050509091565b6040517f436f6e73696465726174696f6e2800000000000000000000000000000000000060208201527f52656365697665644974656d5b5d20636f6e73696465726174696f6e00000000602e820152602960f81b604a820152604b0160408051601f19818403018152908290526c0a4cac6cad2eccac892e8cada5609b1b60208301526e1d5a5b9d0e081a5d195b551e5c194b608a1b602d8301526d1859191c995cdcc81d1bdad95b8b60921b603c8301527f75696e74323536206964656e7469666965722c00000000000000000000000000604a8301526e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b605d8301527f6164647265737320726563697069656e74000000000000000000000000000000606c830152602960f81b607d83015290607e0160408051601f19818403018152908290526108e89291602001611695565b6040516020818303038152906040528051906020012081565b6040516c0a4cac6cad2eccac892e8cada5609b1b60208201526e1d5a5b9d0e081a5d195b551e5c194b608a1b602d8201526d1859191c995cdcc81d1bdad95b8b60921b603c8201527f75696e74323536206964656e7469666965722c00000000000000000000000000604a8201526e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b605d8201527f6164647265737320726563697069656e74000000000000000000000000000000606c820152602960f81b607d820152607e016108e8565b6040516c0a4cac6cad2eccac892e8cada5609b1b60208201526e1d5a5b9d0e081a5d195b551e5c194b608a1b602d8201526d1859191c995cdcc81d1bdad95b8b60921b603c8201527f75696e74323536206964656e7469666965722c00000000000000000000000000604a8201526e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b605d8201527f6164647265737320726563697069656e74000000000000000000000000000000606c820152602960f81b607d820152607e01610473565b7f0000000000000000000000000000000000000000000000000000000000000000338114610ab357636d5769be6000526004601cfd5b50565b6001600160a01b03811660008181526020818152604091829020805460ff1916905590519182527f3525e22824a8a7df2c9a6029941c824cf95b6447f1e13d5128fd3826d35afe8b91015b60405180910390a150565b6001600160a01b03811660008181526020818152604091829020805460ff1916600117905590519182527f47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f249101610b01565b602060043514610b76576346d5d8956000526004601cfd5b565b604560c435013560601c604435811515828214151615610bac57631bcf9bb76000528160205280604052826060526064601cfd5b50919050565b600081818167ffffffffffffffff811115610bcf57610bcf611470565b604051908082528060200260200182016040528015610bf8578160200160208202803683370190505b50905060005b82811015610c4b57610c26868683818110610c1b57610c1b611611565b905060a00201611114565b828281518110610c3857610c38611611565b6020908102919091010152600101610bfe565b506040517f436f6e73696465726174696f6e2800000000000000000000000000000000000060208201527f52656365697665644974656d5b5d20636f6e73696465726174696f6e00000000602e820152602960f81b604a820152604b0160408051601f19818403018152908290526c0a4cac6cad2eccac892e8cada5609b1b60208301526e1d5a5b9d0e081a5d195b551e5c194b608a1b602d8301526d1859191c995cdcc81d1bdad95b8b60921b603c8301527f75696e74323536206964656e7469666965722c00000000000000000000000000604a8301526e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b605d8301527f6164647265737320726563697069656e74000000000000000000000000000000606c830152602960f81b607d83015290607e0160408051601f1981840301815290829052610d8e9291602001611695565b6040516020818303038152906040528051906020012081604051602001610db591906116c4565b60405160208183030381529060405280519060200120604051602001610de5929190918252602082015260400190565b604051602081830303815290604052805190602001209250505092915050565b60a260c4350135608460a4350135838214610e34576359cb96d16000528160205280604052826060526064601cfd5b50505050565b60007f00000000000000000000000000000000000000000000000000000000000000008686868686604051610e709291906116fa565b604051908190038120610eba95949392916020019485526001600160a01b0393909316602085015267ffffffffffffffff9190911660408401526060830152608082015260a00190565b60405160208183030381529060405280519060200120905095945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614610f95575060408051608080517f000000000000000000000000000000000000000000000000000000000000000060009081527f00000000000000000000000000000000000000000000000000000000000000006020527f0000000000000000000000000000000000000000000000000000000000000000855246606090815230845260a08220949095529093529190915290565b507f000000000000000000000000000000000000000000000000000000000000000090565b600080600052600082516020840380518260410360018111611040576040870151606088015160001a9550811561101d57601b8160ff1c0195507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811660408901525b8588528884526020600060808660015afa50828452848852604088015260005195505b50905250909392505050565b600060608060608061105c610edb565b6040517f04789c980000000000000000000000000000000000000000000000000000000081523060048201529095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906304789c9890602401600060405180830381865afa1580156110dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111049190810190611776565b9899929891975095509350915050565b6040516c0a4cac6cad2eccac892e8cada5609b1b60208201526e1d5a5b9d0e081a5d195b551e5c194b608a1b602d8201526d1859191c995cdcc81d1bdad95b8b60921b603c8201527f75696e74323536206964656e7469666965722c00000000000000000000000000604a8201526e1d5a5b9d0c8d4d88185b5bdd5b9d0b608a1b605d8201527f6164647265737320726563697069656e74000000000000000000000000000000606c820152602960f81b607d820152600090607e0160408051601f198184030181529190528051602091820120906111f590840184611885565b6112056040850160208601611290565b6040850135606086013561121f60a0880160808901611290565b604051602001611234969594939291906118a6565b604051602081830303815290604052805190602001209050919050565b6000808585111561126157600080fd5b8386111561126e57600080fd5b5050820193919092039150565b6001600160a01b0381168114610ab357600080fd5b6000602082840312156112a257600080fd5b81356112ad8161127b565b9392505050565b6000602082840312156112c657600080fd5b813580151581146112ad57600080fd5b6020808252825182820181905260009190848201906040850190845b818110156113175783516001600160a01b0316835292840192918401916001016112f2565b50909695505050505050565b60006020828403121561133557600080fd5b81356001600160e01b0319811681146112ad57600080fd5b60005b83811015611368578181015183820152602001611350565b50506000910152565b6000815180845261138981602086016020860161134d565b601f01601f19169290920160200192915050565b6020815260006112ad6020830184611371565b6000602082840312156113c257600080fd5b813567ffffffffffffffff8111156113d957600080fd5b820161014081850312156112ad57600080fd5b600060408083526113ff81840186611371565b6020848203818601528186518084528284019150828160051b85010183890160005b8381101561146057868303601f1901855281518051845286015186840189905261144d89850182611371565b9587019593505090850190600101611421565b50909a9950505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156114af576114af611470565b604052919050565b600067ffffffffffffffff8211156114d1576114d1611470565b5060051b60200190565b600060208083850312156114ee57600080fd5b825167ffffffffffffffff81111561150557600080fd5b8301601f8101851361151657600080fd5b8051611529611524826114b7565b611486565b81815260059190911b8201830190838101908783111561154857600080fd5b928401925b8284101561156f5783516115608161127b565b8252928401929084019061154d565b979650505050505050565b6000808335601e1984360301811261159157600080fd5b83018035915067ffffffffffffffff8211156115ac57600080fd5b6020019150368190038213156115c157600080fd5b9250929050565b6000808335601e198436030181126115df57600080fd5b83018035915067ffffffffffffffff8211156115fa57600080fd5b602001915060a0810236038213156115c157600080fd5b634e487b7160e01b600052603260045260246000fd5b848152600060206080818401526116416080840187611371565b838103604085015285518082528287019183019060005b8181101561167457835183529284019291840191600101611658565b505084810360608601526116888187611371565b9998505050505050505050565b600083516116a781846020880161134d565b8351908301906116bb81836020880161134d565b01949350505050565b815160009082906020808601845b838110156116ee578151855293820193908201906001016116d2565b50929695505050505050565b8183823760009101908152919050565b600082601f83011261171b57600080fd5b815167ffffffffffffffff81111561173557611735611470565b6117486020601f19601f84011601611486565b81815284602083860101111561175d57600080fd5b61176e82602083016020870161134d565b949350505050565b600080600080600060a0868803121561178e57600080fd5b8551945060208087015167ffffffffffffffff808211156117ae57600080fd5b6117ba8a838b0161170a565b965060408901519150808211156117d057600080fd5b6117dc8a838b0161170a565b955060608901519150808211156117f257600080fd5b818901915089601f83011261180657600080fd5b8151611814611524826114b7565b81815260059190911b8301840190848101908c83111561183357600080fd5b938501935b8285101561185157845182529385019390850190611838565b60808c0151909750945050508083111561186a57600080fd5b50506118788882890161170a565b9150509295509295909350565b60006020828403121561189757600080fd5b8135600681106112ad57600080fd5b86815260c08101600687106118cb57634e487b7160e01b600052602160045260246000fd5b8660208301526001600160a01b03808716604084015285606084015284608084015280841660a08401525097965050505050505056fea164736f6c6343000811000aa164736f6c6343000811000a",
  "devdoc": {
    "author": "BCLeFevre",
    "errors": {
      "CallerIsNotNewPotentialOwner(address)": [
        {
          "details": "Revert with an error when attempting to claim ownership of a zone      with a caller that is not the current potential owner for the      zone in question."
        }
      ],
      "CallerIsNotOwner(address)": [
        {
          "details": "Revert with an error when attempting to update channels or transfer      ownership of a zone when the caller is not the owner of the      zone in question."
        }
      ],
      "CallerIsNotOwnerOrSigner(address)": [
        {
          "details": "Revert with an error when the caller is not the owner or an active      signer of the signed zone in question."
        }
      ],
      "InvalidCreator()": [
        {
          "details": "Revert with an error when attempting to create a new signed zone      using a salt where the first twenty bytes do not match the address      of the caller or are not set to zero."
        }
      ],
      "InvalidInitialOwner()": [
        {
          "details": "Revert with an error when attempting to create a new zone when no      initial owner address is supplied."
        }
      ],
      "NewPotentialOwnerAlreadySet(address,address)": [
        {
          "details": "Revert with an error when attempting to set a new potential owner      that is already set."
        }
      ],
      "NewPotentialOwnerIsZeroAddress(address)": [
        {
          "details": "Revert with an error when attempting to register a new potential      owner and supplying the null address."
        }
      ],
      "NoPotentialOwnerCurrentlySet(address)": [
        {
          "details": "Revert with an error when attempting to cancel ownership transfer      when no new potential owner is currently set."
        }
      ],
      "NoZone()": [
        {
          "details": "Revert with an error when attempting to interact with a zone that      does not yet exist."
        }
      ],
      "SignerAlreadyAdded(address)": [
        {
          "details": "Revert with an error if trying to add a signer that is      already active."
        }
      ],
      "SignerCannotBeReauthorized(address)": [
        {
          "details": "Revert with an error if a removed signer is trying to be      reauthorized."
        }
      ],
      "SignerCannotBeZeroAddress()": [
        {
          "details": "Revert with an error if a new signer is the zero address."
        }
      ],
      "SignerNotPresent(address)": [
        {
          "details": "Revert with an error if trying to remove a signer that is      not present."
        }
      ],
      "ZoneAlreadyExists(address)": [
        {
          "details": "Revert with an error when attempting to deploy a zone that is      currently deployed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership(address)": {
        "params": {
          "zone": "The zone for which to accept ownership."
        }
      },
      "cancelOwnershipTransfer(address)": {
        "params": {
          "zone": "The zone for which to cancel ownership transfer."
        }
      },
      "constructor": {
        "details": "Initialize contract"
      },
      "createZone(string,string,string,address,bytes32)": {
        "params": {
          "apiEndpoint": "The API endpoint where orders for this zone can be                    signed.",
          "documentationURI": "The URI to the documentation describing the                         behavior of the contract.                    Request and response payloads are defined in SIP-7.",
          "initialOwner": "The initial owner to set for the new zone.",
          "salt": "The salt to be used to derive the zone address",
          "zoneName": "The name for the zone returned in                    getSeaportMetadata()."
        },
        "returns": {
          "derivedAddress": "The derived address for the zone."
        }
      },
      "getActiveSigners(address)": {
        "params": {
          "zone": "The zone to return the active signers for."
        },
        "returns": {
          "signers": "The active signers."
        }
      },
      "getAdditionalZoneInformation(address)": {
        "returns": {
          "apiEndpoint": "     The API endpoint for the zone.",
          "documentationURI": "The documentation URI for the zone.",
          "domainSeparator": " The domain separator used for signing.",
          "substandards": "    The substandards supported by the zone.",
          "zoneName": "        The name of the zone."
        }
      },
      "getPotentialOwner(address)": {
        "params": {
          "zone": "The zone for which to retrieve the potential owner."
        },
        "returns": {
          "potentialOwner": "The potential owner, if any, for the zone."
        }
      },
      "getZone(bytes32)": {
        "params": {
          "salt": "The salt to be used to derive the zone address."
        },
        "returns": {
          "derivedAddress": "The derived address of the signed zone."
        }
      },
      "ownerOf(address)": {
        "params": {
          "zone": "The zone for which to retrieve the associated owner."
        },
        "returns": {
          "owner": "The owner of the supplied zone."
        }
      },
      "transferOwnership(address,address)": {
        "params": {
          "newPotentialOwner": "The new potential owner of the zone.",
          "zone": "The zone for which to initiate ownership transfer."
        }
      },
      "updateAPIEndpoint(address,string)": {
        "params": {
          "newApiEndpoint": "The new API endpoint.",
          "zone": "The signed zone to update the API endpoint for."
        }
      },
      "updateSigner(address,address,bool)": {
        "params": {
          "active": "Whether the signer should be active or not.",
          "signer": "The signer to update the permissions for.",
          "zone": "The signed zone to update the signer permissions for."
        }
      }
    },
    "stateVariables": {
      "_NAME_HASH": {
        "details": "The EIP-712 digest parameters for the SignedZone."
      },
      "_signedZones": {
        "details": "Mapping of signed zone properties keyed by the Signed Zone      address."
      }
    },
    "title": "SignedZoneController",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership(address)": {
        "notice": "Accept ownership of a supplied zone. Only accounts that the         current owner has set as the new potential owner may call this         function."
      },
      "cancelOwnershipTransfer(address)": {
        "notice": "Clear the currently set potential owner, if any, from a zone.         Only the owner of the zone in question may call this function."
      },
      "createZone(string,string,string,address,bytes32)": {
        "notice": "Deploy a SignedZone to a precomputed address."
      },
      "getActiveSigners(address)": {
        "notice": "Returns the active signers for the zone."
      },
      "getAdditionalZoneInformation(address)": {
        "notice": "External call to return the signing information, substandards,         and documentation about the zone."
      },
      "getPotentialOwner(address)": {
        "notice": "Retrieve the potential owner, if any, for a given zone. The         current owner may set a new potential owner via         `transferOwnership` and that owner may then accept ownership of         the zone in question via `acceptOwnership`."
      },
      "getZone(bytes32)": {
        "notice": "Derive the zone address associated with a salt."
      },
      "ownerOf(address)": {
        "notice": "Retrieve the current owner of a deployed zone."
      },
      "transferOwnership(address,address)": {
        "notice": "Initiate zone ownership transfer by assigning a new potential         owner for the given zone. Once set, the new potential owner         may call `acceptOwnership` to claim ownership of the zone.         Only the owner of the zone in question may call this function."
      },
      "updateAPIEndpoint(address,string)": {
        "notice": "Update the API endpoint returned by a zone.         Only the owner or an active signer of the supplied zone can call         this function."
      },
      "updateSigner(address,address,bool)": {
        "notice": "Add or remove a signer from the supplied zone.         Only the owner or an active signer of the supplied zone can call         this function."
      }
    },
    "notice": "SignedZoneController enables the deploying of SignedZones.         SignedZones are an implementation of SIP-7 that requires orders to         be signed by  an approved signer.         https://github.com/ProjectOpenSea/SIPs/blob/main/SIPS/sip-7.md",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1119,
        "contract": "src/zones/SignedZoneController.sol:SignedZoneController",
        "label": "_signedZones",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(SignedZoneProperties)1113_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(SignedZoneProperties)1113_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SignedZoneController.SignedZoneProperties)",
        "numberOfBytes": "32",
        "value": "t_struct(SignedZoneProperties)1113_storage"
      },
      "t_mapping(t_address,t_struct(SignerInfo)1083_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SignedZoneController.SignerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SignerInfo)1083_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SignedZoneProperties)1113_storage": {
        "encoding": "inplace",
        "label": "struct SignedZoneController.SignedZoneProperties",
        "members": [
          {
            "astId": 1086,
            "contract": "src/zones/SignedZoneController.sol:SignedZoneController",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1089,
            "contract": "src/zones/SignedZoneController.sol:SignedZoneController",
            "label": "potentialOwner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1092,
            "contract": "src/zones/SignedZoneController.sol:SignedZoneController",
            "label": "zoneName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1095,
            "contract": "src/zones/SignedZoneController.sol:SignedZoneController",
            "label": "apiEndpoint",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1098,
            "contract": "src/zones/SignedZoneController.sol:SignedZoneController",
            "label": "documentationURI",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1102,
            "contract": "src/zones/SignedZoneController.sol:SignedZoneController",
            "label": "substandards",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1108,
            "contract": "src/zones/SignedZoneController.sol:SignedZoneController",
            "label": "signers",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_struct(SignerInfo)1083_storage)"
          },
          {
            "astId": 1112,
            "contract": "src/zones/SignedZoneController.sol:SignedZoneController",
            "label": "activeSignerList",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(SignerInfo)1083_storage": {
        "encoding": "inplace",
        "label": "struct SignedZoneController.SignerInfo",
        "members": [
          {
            "astId": 1079,
            "contract": "src/zones/SignedZoneController.sol:SignedZoneController",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1082,
            "contract": "src/zones/SignedZoneController.sol:SignedZoneController",
            "label": "previouslyActive",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}